
01_LedBlink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002068  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000007c  08002214  08002214  00012214  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002290  08002290  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002290  08002290  00012290  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002298  08002298  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002298  08002298  00012298  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800229c  0800229c  0001229c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080022a0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000070  08002310  00020070  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000a0  08002310  000200a0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   000065b7  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001536  00000000  00000000  00026657  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000550  00000000  00000000  00027b90  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000488  00000000  00000000  000280e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023213  00000000  00000000  00028568  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00005b56  00000000  00000000  0004b77b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ced88  00000000  00000000  000512d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00120059  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001894  00000000  00000000  001200d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000070 	.word	0x20000070
 80001c8:	00000000 	.word	0x00000000
 80001cc:	080021fc 	.word	0x080021fc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000074 	.word	0x20000074
 80001e8:	080021fc 	.word	0x080021fc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b972 	b.w	80004e8 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	4688      	mov	r8, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	d14b      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022a:	428a      	cmp	r2, r1
 800022c:	4615      	mov	r5, r2
 800022e:	d967      	bls.n	8000300 <__udivmoddi4+0xe4>
 8000230:	fab2 f282 	clz	r2, r2
 8000234:	b14a      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000236:	f1c2 0720 	rsb	r7, r2, #32
 800023a:	fa01 f302 	lsl.w	r3, r1, r2
 800023e:	fa20 f707 	lsr.w	r7, r0, r7
 8000242:	4095      	lsls	r5, r2
 8000244:	ea47 0803 	orr.w	r8, r7, r3
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbb8 f7fe 	udiv	r7, r8, lr
 8000254:	fa1f fc85 	uxth.w	ip, r5
 8000258:	fb0e 8817 	mls	r8, lr, r7, r8
 800025c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000260:	fb07 f10c 	mul.w	r1, r7, ip
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18eb      	adds	r3, r5, r3
 800026a:	f107 30ff 	add.w	r0, r7, #4294967295
 800026e:	f080 811b 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8118 	bls.w	80004a8 <__udivmoddi4+0x28c>
 8000278:	3f02      	subs	r7, #2
 800027a:	442b      	add	r3, r5
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0fe 	udiv	r0, r3, lr
 8000284:	fb0e 3310 	mls	r3, lr, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000290:	45a4      	cmp	ip, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	192c      	adds	r4, r5, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8107 	bcs.w	80004ac <__udivmoddi4+0x290>
 800029e:	45a4      	cmp	ip, r4
 80002a0:	f240 8104 	bls.w	80004ac <__udivmoddi4+0x290>
 80002a4:	3802      	subs	r0, #2
 80002a6:	442c      	add	r4, r5
 80002a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002ac:	eba4 040c 	sub.w	r4, r4, ip
 80002b0:	2700      	movs	r7, #0
 80002b2:	b11e      	cbz	r6, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c6 4300 	strd	r4, r3, [r6]
 80002bc:	4639      	mov	r1, r7
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d909      	bls.n	80002da <__udivmoddi4+0xbe>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80eb 	beq.w	80004a2 <__udivmoddi4+0x286>
 80002cc:	2700      	movs	r7, #0
 80002ce:	e9c6 0100 	strd	r0, r1, [r6]
 80002d2:	4638      	mov	r0, r7
 80002d4:	4639      	mov	r1, r7
 80002d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002da:	fab3 f783 	clz	r7, r3
 80002de:	2f00      	cmp	r7, #0
 80002e0:	d147      	bne.n	8000372 <__udivmoddi4+0x156>
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d302      	bcc.n	80002ec <__udivmoddi4+0xd0>
 80002e6:	4282      	cmp	r2, r0
 80002e8:	f200 80fa 	bhi.w	80004e0 <__udivmoddi4+0x2c4>
 80002ec:	1a84      	subs	r4, r0, r2
 80002ee:	eb61 0303 	sbc.w	r3, r1, r3
 80002f2:	2001      	movs	r0, #1
 80002f4:	4698      	mov	r8, r3
 80002f6:	2e00      	cmp	r6, #0
 80002f8:	d0e0      	beq.n	80002bc <__udivmoddi4+0xa0>
 80002fa:	e9c6 4800 	strd	r4, r8, [r6]
 80002fe:	e7dd      	b.n	80002bc <__udivmoddi4+0xa0>
 8000300:	b902      	cbnz	r2, 8000304 <__udivmoddi4+0xe8>
 8000302:	deff      	udf	#255	; 0xff
 8000304:	fab2 f282 	clz	r2, r2
 8000308:	2a00      	cmp	r2, #0
 800030a:	f040 808f 	bne.w	800042c <__udivmoddi4+0x210>
 800030e:	1b49      	subs	r1, r1, r5
 8000310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000314:	fa1f f885 	uxth.w	r8, r5
 8000318:	2701      	movs	r7, #1
 800031a:	fbb1 fcfe 	udiv	ip, r1, lr
 800031e:	0c23      	lsrs	r3, r4, #16
 8000320:	fb0e 111c 	mls	r1, lr, ip, r1
 8000324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000328:	fb08 f10c 	mul.w	r1, r8, ip
 800032c:	4299      	cmp	r1, r3
 800032e:	d907      	bls.n	8000340 <__udivmoddi4+0x124>
 8000330:	18eb      	adds	r3, r5, r3
 8000332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4299      	cmp	r1, r3
 800033a:	f200 80cd 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 800033e:	4684      	mov	ip, r0
 8000340:	1a59      	subs	r1, r3, r1
 8000342:	b2a3      	uxth	r3, r4
 8000344:	fbb1 f0fe 	udiv	r0, r1, lr
 8000348:	fb0e 1410 	mls	r4, lr, r0, r1
 800034c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000350:	fb08 f800 	mul.w	r8, r8, r0
 8000354:	45a0      	cmp	r8, r4
 8000356:	d907      	bls.n	8000368 <__udivmoddi4+0x14c>
 8000358:	192c      	adds	r4, r5, r4
 800035a:	f100 33ff 	add.w	r3, r0, #4294967295
 800035e:	d202      	bcs.n	8000366 <__udivmoddi4+0x14a>
 8000360:	45a0      	cmp	r8, r4
 8000362:	f200 80b6 	bhi.w	80004d2 <__udivmoddi4+0x2b6>
 8000366:	4618      	mov	r0, r3
 8000368:	eba4 0408 	sub.w	r4, r4, r8
 800036c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000370:	e79f      	b.n	80002b2 <__udivmoddi4+0x96>
 8000372:	f1c7 0c20 	rsb	ip, r7, #32
 8000376:	40bb      	lsls	r3, r7
 8000378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800037c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000380:	fa01 f407 	lsl.w	r4, r1, r7
 8000384:	fa20 f50c 	lsr.w	r5, r0, ip
 8000388:	fa21 f30c 	lsr.w	r3, r1, ip
 800038c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000390:	4325      	orrs	r5, r4
 8000392:	fbb3 f9f8 	udiv	r9, r3, r8
 8000396:	0c2c      	lsrs	r4, r5, #16
 8000398:	fb08 3319 	mls	r3, r8, r9, r3
 800039c:	fa1f fa8e 	uxth.w	sl, lr
 80003a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003a4:	fb09 f40a 	mul.w	r4, r9, sl
 80003a8:	429c      	cmp	r4, r3
 80003aa:	fa02 f207 	lsl.w	r2, r2, r7
 80003ae:	fa00 f107 	lsl.w	r1, r0, r7
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1e 0303 	adds.w	r3, lr, r3
 80003b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80003bc:	f080 8087 	bcs.w	80004ce <__udivmoddi4+0x2b2>
 80003c0:	429c      	cmp	r4, r3
 80003c2:	f240 8084 	bls.w	80004ce <__udivmoddi4+0x2b2>
 80003c6:	f1a9 0902 	sub.w	r9, r9, #2
 80003ca:	4473      	add	r3, lr
 80003cc:	1b1b      	subs	r3, r3, r4
 80003ce:	b2ad      	uxth	r5, r5
 80003d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80003d4:	fb08 3310 	mls	r3, r8, r0, r3
 80003d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80003e0:	45a2      	cmp	sl, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1e 0404 	adds.w	r4, lr, r4
 80003e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80003ec:	d26b      	bcs.n	80004c6 <__udivmoddi4+0x2aa>
 80003ee:	45a2      	cmp	sl, r4
 80003f0:	d969      	bls.n	80004c6 <__udivmoddi4+0x2aa>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4474      	add	r4, lr
 80003f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003fa:	fba0 8902 	umull	r8, r9, r0, r2
 80003fe:	eba4 040a 	sub.w	r4, r4, sl
 8000402:	454c      	cmp	r4, r9
 8000404:	46c2      	mov	sl, r8
 8000406:	464b      	mov	r3, r9
 8000408:	d354      	bcc.n	80004b4 <__udivmoddi4+0x298>
 800040a:	d051      	beq.n	80004b0 <__udivmoddi4+0x294>
 800040c:	2e00      	cmp	r6, #0
 800040e:	d069      	beq.n	80004e4 <__udivmoddi4+0x2c8>
 8000410:	ebb1 050a 	subs.w	r5, r1, sl
 8000414:	eb64 0403 	sbc.w	r4, r4, r3
 8000418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800041c:	40fd      	lsrs	r5, r7
 800041e:	40fc      	lsrs	r4, r7
 8000420:	ea4c 0505 	orr.w	r5, ip, r5
 8000424:	e9c6 5400 	strd	r5, r4, [r6]
 8000428:	2700      	movs	r7, #0
 800042a:	e747      	b.n	80002bc <__udivmoddi4+0xa0>
 800042c:	f1c2 0320 	rsb	r3, r2, #32
 8000430:	fa20 f703 	lsr.w	r7, r0, r3
 8000434:	4095      	lsls	r5, r2
 8000436:	fa01 f002 	lsl.w	r0, r1, r2
 800043a:	fa21 f303 	lsr.w	r3, r1, r3
 800043e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000442:	4338      	orrs	r0, r7
 8000444:	0c01      	lsrs	r1, r0, #16
 8000446:	fbb3 f7fe 	udiv	r7, r3, lr
 800044a:	fa1f f885 	uxth.w	r8, r5
 800044e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000456:	fb07 f308 	mul.w	r3, r7, r8
 800045a:	428b      	cmp	r3, r1
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x256>
 8000462:	1869      	adds	r1, r5, r1
 8000464:	f107 3cff 	add.w	ip, r7, #4294967295
 8000468:	d22f      	bcs.n	80004ca <__udivmoddi4+0x2ae>
 800046a:	428b      	cmp	r3, r1
 800046c:	d92d      	bls.n	80004ca <__udivmoddi4+0x2ae>
 800046e:	3f02      	subs	r7, #2
 8000470:	4429      	add	r1, r5
 8000472:	1acb      	subs	r3, r1, r3
 8000474:	b281      	uxth	r1, r0
 8000476:	fbb3 f0fe 	udiv	r0, r3, lr
 800047a:	fb0e 3310 	mls	r3, lr, r0, r3
 800047e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000482:	fb00 f308 	mul.w	r3, r0, r8
 8000486:	428b      	cmp	r3, r1
 8000488:	d907      	bls.n	800049a <__udivmoddi4+0x27e>
 800048a:	1869      	adds	r1, r5, r1
 800048c:	f100 3cff 	add.w	ip, r0, #4294967295
 8000490:	d217      	bcs.n	80004c2 <__udivmoddi4+0x2a6>
 8000492:	428b      	cmp	r3, r1
 8000494:	d915      	bls.n	80004c2 <__udivmoddi4+0x2a6>
 8000496:	3802      	subs	r0, #2
 8000498:	4429      	add	r1, r5
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004a0:	e73b      	b.n	800031a <__udivmoddi4+0xfe>
 80004a2:	4637      	mov	r7, r6
 80004a4:	4630      	mov	r0, r6
 80004a6:	e709      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a8:	4607      	mov	r7, r0
 80004aa:	e6e7      	b.n	800027c <__udivmoddi4+0x60>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6fb      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004b0:	4541      	cmp	r1, r8
 80004b2:	d2ab      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80004b8:	eb69 020e 	sbc.w	r2, r9, lr
 80004bc:	3801      	subs	r0, #1
 80004be:	4613      	mov	r3, r2
 80004c0:	e7a4      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c2:	4660      	mov	r0, ip
 80004c4:	e7e9      	b.n	800049a <__udivmoddi4+0x27e>
 80004c6:	4618      	mov	r0, r3
 80004c8:	e795      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004ca:	4667      	mov	r7, ip
 80004cc:	e7d1      	b.n	8000472 <__udivmoddi4+0x256>
 80004ce:	4681      	mov	r9, r0
 80004d0:	e77c      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d2:	3802      	subs	r0, #2
 80004d4:	442c      	add	r4, r5
 80004d6:	e747      	b.n	8000368 <__udivmoddi4+0x14c>
 80004d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004dc:	442b      	add	r3, r5
 80004de:	e72f      	b.n	8000340 <__udivmoddi4+0x124>
 80004e0:	4638      	mov	r0, r7
 80004e2:	e708      	b.n	80002f6 <__udivmoddi4+0xda>
 80004e4:	4637      	mov	r7, r6
 80004e6:	e6e9      	b.n	80002bc <__udivmoddi4+0xa0>

080004e8 <__aeabi_idiv0>:
 80004e8:	4770      	bx	lr
 80004ea:	bf00      	nop

080004ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80004ec:	b580      	push	{r7, lr}
 80004ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80004f0:	4b0e      	ldr	r3, [pc, #56]	; (800052c <HAL_Init+0x40>)
 80004f2:	681b      	ldr	r3, [r3, #0]
 80004f4:	4a0d      	ldr	r2, [pc, #52]	; (800052c <HAL_Init+0x40>)
 80004f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <HAL_Init+0x40>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	4a0a      	ldr	r2, [pc, #40]	; (800052c <HAL_Init+0x40>)
 8000502:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000506:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <HAL_Init+0x40>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	4a07      	ldr	r2, [pc, #28]	; (800052c <HAL_Init+0x40>)
 800050e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000512:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000514:	2003      	movs	r0, #3
 8000516:	f000 f92f 	bl	8000778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800051a:	2000      	movs	r0, #0
 800051c:	f000 f808 	bl	8000530 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000520:	f001 f89e 	bl	8001660 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000524:	2300      	movs	r3, #0
}
 8000526:	4618      	mov	r0, r3
 8000528:	bd80      	pop	{r7, pc}
 800052a:	bf00      	nop
 800052c:	40023c00 	.word	0x40023c00

08000530 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000538:	4b12      	ldr	r3, [pc, #72]	; (8000584 <HAL_InitTick+0x54>)
 800053a:	681a      	ldr	r2, [r3, #0]
 800053c:	4b12      	ldr	r3, [pc, #72]	; (8000588 <HAL_InitTick+0x58>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	4619      	mov	r1, r3
 8000542:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000546:	fbb3 f3f1 	udiv	r3, r3, r1
 800054a:	fbb2 f3f3 	udiv	r3, r2, r3
 800054e:	4618      	mov	r0, r3
 8000550:	f000 f939 	bl	80007c6 <HAL_SYSTICK_Config>
 8000554:	4603      	mov	r3, r0
 8000556:	2b00      	cmp	r3, #0
 8000558:	d001      	beq.n	800055e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800055a:	2301      	movs	r3, #1
 800055c:	e00e      	b.n	800057c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800055e:	687b      	ldr	r3, [r7, #4]
 8000560:	2b0f      	cmp	r3, #15
 8000562:	d80a      	bhi.n	800057a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000564:	2200      	movs	r2, #0
 8000566:	6879      	ldr	r1, [r7, #4]
 8000568:	f04f 30ff 	mov.w	r0, #4294967295
 800056c:	f000 f90f 	bl	800078e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000570:	4a06      	ldr	r2, [pc, #24]	; (800058c <HAL_InitTick+0x5c>)
 8000572:	687b      	ldr	r3, [r7, #4]
 8000574:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000576:	2300      	movs	r3, #0
 8000578:	e000      	b.n	800057c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800057a:	2301      	movs	r3, #1
}
 800057c:	4618      	mov	r0, r3
 800057e:	3708      	adds	r7, #8
 8000580:	46bd      	mov	sp, r7
 8000582:	bd80      	pop	{r7, pc}
 8000584:	20000008 	.word	0x20000008
 8000588:	20000004 	.word	0x20000004
 800058c:	20000000 	.word	0x20000000

08000590 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000590:	b480      	push	{r7}
 8000592:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000594:	4b06      	ldr	r3, [pc, #24]	; (80005b0 <HAL_IncTick+0x20>)
 8000596:	781b      	ldrb	r3, [r3, #0]
 8000598:	461a      	mov	r2, r3
 800059a:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <HAL_IncTick+0x24>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	4413      	add	r3, r2
 80005a0:	4a04      	ldr	r2, [pc, #16]	; (80005b4 <HAL_IncTick+0x24>)
 80005a2:	6013      	str	r3, [r2, #0]
}
 80005a4:	bf00      	nop
 80005a6:	46bd      	mov	sp, r7
 80005a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop
 80005b0:	20000004 	.word	0x20000004
 80005b4:	20000098 	.word	0x20000098

080005b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80005b8:	b480      	push	{r7}
 80005ba:	af00      	add	r7, sp, #0
  return uwTick;
 80005bc:	4b03      	ldr	r3, [pc, #12]	; (80005cc <HAL_GetTick+0x14>)
 80005be:	681b      	ldr	r3, [r3, #0]
}
 80005c0:	4618      	mov	r0, r3
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	20000098 	.word	0x20000098

080005d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80005d0:	b580      	push	{r7, lr}
 80005d2:	b084      	sub	sp, #16
 80005d4:	af00      	add	r7, sp, #0
 80005d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80005d8:	f7ff ffee 	bl	80005b8 <HAL_GetTick>
 80005dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80005de:	687b      	ldr	r3, [r7, #4]
 80005e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80005e2:	68fb      	ldr	r3, [r7, #12]
 80005e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80005e8:	d005      	beq.n	80005f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80005ea:	4b09      	ldr	r3, [pc, #36]	; (8000610 <HAL_Delay+0x40>)
 80005ec:	781b      	ldrb	r3, [r3, #0]
 80005ee:	461a      	mov	r2, r3
 80005f0:	68fb      	ldr	r3, [r7, #12]
 80005f2:	4413      	add	r3, r2
 80005f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80005f6:	bf00      	nop
 80005f8:	f7ff ffde 	bl	80005b8 <HAL_GetTick>
 80005fc:	4602      	mov	r2, r0
 80005fe:	68bb      	ldr	r3, [r7, #8]
 8000600:	1ad3      	subs	r3, r2, r3
 8000602:	68fa      	ldr	r2, [r7, #12]
 8000604:	429a      	cmp	r2, r3
 8000606:	d8f7      	bhi.n	80005f8 <HAL_Delay+0x28>
  {
  }
}
 8000608:	bf00      	nop
 800060a:	3710      	adds	r7, #16
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20000004 	.word	0x20000004

08000614 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000614:	b480      	push	{r7}
 8000616:	b085      	sub	sp, #20
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	f003 0307 	and.w	r3, r3, #7
 8000622:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000624:	4b0c      	ldr	r3, [pc, #48]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000626:	68db      	ldr	r3, [r3, #12]
 8000628:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062a:	68ba      	ldr	r2, [r7, #8]
 800062c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000630:	4013      	ands	r3, r2
 8000632:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000638:	68bb      	ldr	r3, [r7, #8]
 800063a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800063c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000640:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000644:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000646:	4a04      	ldr	r2, [pc, #16]	; (8000658 <__NVIC_SetPriorityGrouping+0x44>)
 8000648:	68bb      	ldr	r3, [r7, #8]
 800064a:	60d3      	str	r3, [r2, #12]
}
 800064c:	bf00      	nop
 800064e:	3714      	adds	r7, #20
 8000650:	46bd      	mov	sp, r7
 8000652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000656:	4770      	bx	lr
 8000658:	e000ed00 	.word	0xe000ed00

0800065c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800065c:	b480      	push	{r7}
 800065e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000660:	4b04      	ldr	r3, [pc, #16]	; (8000674 <__NVIC_GetPriorityGrouping+0x18>)
 8000662:	68db      	ldr	r3, [r3, #12]
 8000664:	0a1b      	lsrs	r3, r3, #8
 8000666:	f003 0307 	and.w	r3, r3, #7
}
 800066a:	4618      	mov	r0, r3
 800066c:	46bd      	mov	sp, r7
 800066e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000672:	4770      	bx	lr
 8000674:	e000ed00 	.word	0xe000ed00

08000678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	6039      	str	r1, [r7, #0]
 8000682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	db0a      	blt.n	80006a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800068c:	683b      	ldr	r3, [r7, #0]
 800068e:	b2da      	uxtb	r2, r3
 8000690:	490c      	ldr	r1, [pc, #48]	; (80006c4 <__NVIC_SetPriority+0x4c>)
 8000692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000696:	0112      	lsls	r2, r2, #4
 8000698:	b2d2      	uxtb	r2, r2
 800069a:	440b      	add	r3, r1
 800069c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80006a0:	e00a      	b.n	80006b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	b2da      	uxtb	r2, r3
 80006a6:	4908      	ldr	r1, [pc, #32]	; (80006c8 <__NVIC_SetPriority+0x50>)
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	f003 030f 	and.w	r3, r3, #15
 80006ae:	3b04      	subs	r3, #4
 80006b0:	0112      	lsls	r2, r2, #4
 80006b2:	b2d2      	uxtb	r2, r2
 80006b4:	440b      	add	r3, r1
 80006b6:	761a      	strb	r2, [r3, #24]
}
 80006b8:	bf00      	nop
 80006ba:	370c      	adds	r7, #12
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	e000e100 	.word	0xe000e100
 80006c8:	e000ed00 	.word	0xe000ed00

080006cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b089      	sub	sp, #36	; 0x24
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80006d8:	68fb      	ldr	r3, [r7, #12]
 80006da:	f003 0307 	and.w	r3, r3, #7
 80006de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80006e0:	69fb      	ldr	r3, [r7, #28]
 80006e2:	f1c3 0307 	rsb	r3, r3, #7
 80006e6:	2b04      	cmp	r3, #4
 80006e8:	bf28      	it	cs
 80006ea:	2304      	movcs	r3, #4
 80006ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80006ee:	69fb      	ldr	r3, [r7, #28]
 80006f0:	3304      	adds	r3, #4
 80006f2:	2b06      	cmp	r3, #6
 80006f4:	d902      	bls.n	80006fc <NVIC_EncodePriority+0x30>
 80006f6:	69fb      	ldr	r3, [r7, #28]
 80006f8:	3b03      	subs	r3, #3
 80006fa:	e000      	b.n	80006fe <NVIC_EncodePriority+0x32>
 80006fc:	2300      	movs	r3, #0
 80006fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000700:	f04f 32ff 	mov.w	r2, #4294967295
 8000704:	69bb      	ldr	r3, [r7, #24]
 8000706:	fa02 f303 	lsl.w	r3, r2, r3
 800070a:	43da      	mvns	r2, r3
 800070c:	68bb      	ldr	r3, [r7, #8]
 800070e:	401a      	ands	r2, r3
 8000710:	697b      	ldr	r3, [r7, #20]
 8000712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000714:	f04f 31ff 	mov.w	r1, #4294967295
 8000718:	697b      	ldr	r3, [r7, #20]
 800071a:	fa01 f303 	lsl.w	r3, r1, r3
 800071e:	43d9      	mvns	r1, r3
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000724:	4313      	orrs	r3, r2
         );
}
 8000726:	4618      	mov	r0, r3
 8000728:	3724      	adds	r7, #36	; 0x24
 800072a:	46bd      	mov	sp, r7
 800072c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000730:	4770      	bx	lr
	...

08000734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b082      	sub	sp, #8
 8000738:	af00      	add	r7, sp, #0
 800073a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800073c:	687b      	ldr	r3, [r7, #4]
 800073e:	3b01      	subs	r3, #1
 8000740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000744:	d301      	bcc.n	800074a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000746:	2301      	movs	r3, #1
 8000748:	e00f      	b.n	800076a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800074a:	4a0a      	ldr	r2, [pc, #40]	; (8000774 <SysTick_Config+0x40>)
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	3b01      	subs	r3, #1
 8000750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000752:	210f      	movs	r1, #15
 8000754:	f04f 30ff 	mov.w	r0, #4294967295
 8000758:	f7ff ff8e 	bl	8000678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800075c:	4b05      	ldr	r3, [pc, #20]	; (8000774 <SysTick_Config+0x40>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000762:	4b04      	ldr	r3, [pc, #16]	; (8000774 <SysTick_Config+0x40>)
 8000764:	2207      	movs	r2, #7
 8000766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000768:	2300      	movs	r3, #0
}
 800076a:	4618      	mov	r0, r3
 800076c:	3708      	adds	r7, #8
 800076e:	46bd      	mov	sp, r7
 8000770:	bd80      	pop	{r7, pc}
 8000772:	bf00      	nop
 8000774:	e000e010 	.word	0xe000e010

08000778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
 800077e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff47 	bl	8000614 <__NVIC_SetPriorityGrouping>
}
 8000786:	bf00      	nop
 8000788:	3708      	adds	r7, #8
 800078a:	46bd      	mov	sp, r7
 800078c:	bd80      	pop	{r7, pc}

0800078e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800078e:	b580      	push	{r7, lr}
 8000790:	b086      	sub	sp, #24
 8000792:	af00      	add	r7, sp, #0
 8000794:	4603      	mov	r3, r0
 8000796:	60b9      	str	r1, [r7, #8]
 8000798:	607a      	str	r2, [r7, #4]
 800079a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800079c:	2300      	movs	r3, #0
 800079e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80007a0:	f7ff ff5c 	bl	800065c <__NVIC_GetPriorityGrouping>
 80007a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80007a6:	687a      	ldr	r2, [r7, #4]
 80007a8:	68b9      	ldr	r1, [r7, #8]
 80007aa:	6978      	ldr	r0, [r7, #20]
 80007ac:	f7ff ff8e 	bl	80006cc <NVIC_EncodePriority>
 80007b0:	4602      	mov	r2, r0
 80007b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b6:	4611      	mov	r1, r2
 80007b8:	4618      	mov	r0, r3
 80007ba:	f7ff ff5d 	bl	8000678 <__NVIC_SetPriority>
}
 80007be:	bf00      	nop
 80007c0:	3718      	adds	r7, #24
 80007c2:	46bd      	mov	sp, r7
 80007c4:	bd80      	pop	{r7, pc}

080007c6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80007c6:	b580      	push	{r7, lr}
 80007c8:	b082      	sub	sp, #8
 80007ca:	af00      	add	r7, sp, #0
 80007cc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80007ce:	6878      	ldr	r0, [r7, #4]
 80007d0:	f7ff ffb0 	bl	8000734 <SysTick_Config>
 80007d4:	4603      	mov	r3, r0
}
 80007d6:	4618      	mov	r0, r3
 80007d8:	3708      	adds	r7, #8
 80007da:	46bd      	mov	sp, r7
 80007dc:	bd80      	pop	{r7, pc}
	...

080007e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b089      	sub	sp, #36	; 0x24
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	6078      	str	r0, [r7, #4]
 80007e8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80007ee:	2300      	movs	r3, #0
 80007f0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80007f2:	2300      	movs	r3, #0
 80007f4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80007f6:	2300      	movs	r3, #0
 80007f8:	61fb      	str	r3, [r7, #28]
 80007fa:	e177      	b.n	8000aec <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80007fc:	2201      	movs	r2, #1
 80007fe:	69fb      	ldr	r3, [r7, #28]
 8000800:	fa02 f303 	lsl.w	r3, r2, r3
 8000804:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000806:	683b      	ldr	r3, [r7, #0]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	697a      	ldr	r2, [r7, #20]
 800080c:	4013      	ands	r3, r2
 800080e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000810:	693a      	ldr	r2, [r7, #16]
 8000812:	697b      	ldr	r3, [r7, #20]
 8000814:	429a      	cmp	r2, r3
 8000816:	f040 8166 	bne.w	8000ae6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	685b      	ldr	r3, [r3, #4]
 800081e:	2b02      	cmp	r3, #2
 8000820:	d003      	beq.n	800082a <HAL_GPIO_Init+0x4a>
 8000822:	683b      	ldr	r3, [r7, #0]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	2b12      	cmp	r3, #18
 8000828:	d123      	bne.n	8000872 <HAL_GPIO_Init+0x92>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800082a:	69fb      	ldr	r3, [r7, #28]
 800082c:	08da      	lsrs	r2, r3, #3
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	3208      	adds	r2, #8
 8000832:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000836:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000838:	69fb      	ldr	r3, [r7, #28]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	009b      	lsls	r3, r3, #2
 8000840:	220f      	movs	r2, #15
 8000842:	fa02 f303 	lsl.w	r3, r2, r3
 8000846:	43db      	mvns	r3, r3
 8000848:	69ba      	ldr	r2, [r7, #24]
 800084a:	4013      	ands	r3, r2
 800084c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800084e:	683b      	ldr	r3, [r7, #0]
 8000850:	691a      	ldr	r2, [r3, #16]
 8000852:	69fb      	ldr	r3, [r7, #28]
 8000854:	f003 0307 	and.w	r3, r3, #7
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	fa02 f303 	lsl.w	r3, r2, r3
 800085e:	69ba      	ldr	r2, [r7, #24]
 8000860:	4313      	orrs	r3, r2
 8000862:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000864:	69fb      	ldr	r3, [r7, #28]
 8000866:	08da      	lsrs	r2, r3, #3
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	3208      	adds	r2, #8
 800086c:	69b9      	ldr	r1, [r7, #24]
 800086e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000872:	687b      	ldr	r3, [r7, #4]
 8000874:	681b      	ldr	r3, [r3, #0]
 8000876:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000878:	69fb      	ldr	r3, [r7, #28]
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	2203      	movs	r2, #3
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43db      	mvns	r3, r3
 8000884:	69ba      	ldr	r2, [r7, #24]
 8000886:	4013      	ands	r3, r2
 8000888:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800088a:	683b      	ldr	r3, [r7, #0]
 800088c:	685b      	ldr	r3, [r3, #4]
 800088e:	f003 0203 	and.w	r2, r3, #3
 8000892:	69fb      	ldr	r3, [r7, #28]
 8000894:	005b      	lsls	r3, r3, #1
 8000896:	fa02 f303 	lsl.w	r3, r2, r3
 800089a:	69ba      	ldr	r2, [r7, #24]
 800089c:	4313      	orrs	r3, r2
 800089e:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	69ba      	ldr	r2, [r7, #24]
 80008a4:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008a6:	683b      	ldr	r3, [r7, #0]
 80008a8:	685b      	ldr	r3, [r3, #4]
 80008aa:	2b01      	cmp	r3, #1
 80008ac:	d00b      	beq.n	80008c6 <HAL_GPIO_Init+0xe6>
 80008ae:	683b      	ldr	r3, [r7, #0]
 80008b0:	685b      	ldr	r3, [r3, #4]
 80008b2:	2b02      	cmp	r3, #2
 80008b4:	d007      	beq.n	80008c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008b6:	683b      	ldr	r3, [r7, #0]
 80008b8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008ba:	2b11      	cmp	r3, #17
 80008bc:	d003      	beq.n	80008c6 <HAL_GPIO_Init+0xe6>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	685b      	ldr	r3, [r3, #4]
 80008c2:	2b12      	cmp	r3, #18
 80008c4:	d130      	bne.n	8000928 <HAL_GPIO_Init+0x148>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	689b      	ldr	r3, [r3, #8]
 80008ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80008cc:	69fb      	ldr	r3, [r7, #28]
 80008ce:	005b      	lsls	r3, r3, #1
 80008d0:	2203      	movs	r2, #3
 80008d2:	fa02 f303 	lsl.w	r3, r2, r3
 80008d6:	43db      	mvns	r3, r3
 80008d8:	69ba      	ldr	r2, [r7, #24]
 80008da:	4013      	ands	r3, r2
 80008dc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80008de:	683b      	ldr	r3, [r7, #0]
 80008e0:	68da      	ldr	r2, [r3, #12]
 80008e2:	69fb      	ldr	r3, [r7, #28]
 80008e4:	005b      	lsls	r3, r3, #1
 80008e6:	fa02 f303 	lsl.w	r3, r2, r3
 80008ea:	69ba      	ldr	r2, [r7, #24]
 80008ec:	4313      	orrs	r3, r2
 80008ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	69ba      	ldr	r2, [r7, #24]
 80008f4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	685b      	ldr	r3, [r3, #4]
 80008fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80008fc:	2201      	movs	r2, #1
 80008fe:	69fb      	ldr	r3, [r7, #28]
 8000900:	fa02 f303 	lsl.w	r3, r2, r3
 8000904:	43db      	mvns	r3, r3
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	4013      	ands	r3, r2
 800090a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800090c:	683b      	ldr	r3, [r7, #0]
 800090e:	685b      	ldr	r3, [r3, #4]
 8000910:	091b      	lsrs	r3, r3, #4
 8000912:	f003 0201 	and.w	r2, r3, #1
 8000916:	69fb      	ldr	r3, [r7, #28]
 8000918:	fa02 f303 	lsl.w	r3, r2, r3
 800091c:	69ba      	ldr	r2, [r7, #24]
 800091e:	4313      	orrs	r3, r2
 8000920:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	69ba      	ldr	r2, [r7, #24]
 8000926:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	68db      	ldr	r3, [r3, #12]
 800092c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800092e:	69fb      	ldr	r3, [r7, #28]
 8000930:	005b      	lsls	r3, r3, #1
 8000932:	2203      	movs	r2, #3
 8000934:	fa02 f303 	lsl.w	r3, r2, r3
 8000938:	43db      	mvns	r3, r3
 800093a:	69ba      	ldr	r2, [r7, #24]
 800093c:	4013      	ands	r3, r2
 800093e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000940:	683b      	ldr	r3, [r7, #0]
 8000942:	689a      	ldr	r2, [r3, #8]
 8000944:	69fb      	ldr	r3, [r7, #28]
 8000946:	005b      	lsls	r3, r3, #1
 8000948:	fa02 f303 	lsl.w	r3, r2, r3
 800094c:	69ba      	ldr	r2, [r7, #24]
 800094e:	4313      	orrs	r3, r2
 8000950:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	69ba      	ldr	r2, [r7, #24]
 8000956:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000958:	683b      	ldr	r3, [r7, #0]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000960:	2b00      	cmp	r3, #0
 8000962:	f000 80c0 	beq.w	8000ae6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	60fb      	str	r3, [r7, #12]
 800096a:	4b65      	ldr	r3, [pc, #404]	; (8000b00 <HAL_GPIO_Init+0x320>)
 800096c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096e:	4a64      	ldr	r2, [pc, #400]	; (8000b00 <HAL_GPIO_Init+0x320>)
 8000970:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000974:	6453      	str	r3, [r2, #68]	; 0x44
 8000976:	4b62      	ldr	r3, [pc, #392]	; (8000b00 <HAL_GPIO_Init+0x320>)
 8000978:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800097a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800097e:	60fb      	str	r3, [r7, #12]
 8000980:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000982:	4a60      	ldr	r2, [pc, #384]	; (8000b04 <HAL_GPIO_Init+0x324>)
 8000984:	69fb      	ldr	r3, [r7, #28]
 8000986:	089b      	lsrs	r3, r3, #2
 8000988:	3302      	adds	r3, #2
 800098a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800098e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000990:	69fb      	ldr	r3, [r7, #28]
 8000992:	f003 0303 	and.w	r3, r3, #3
 8000996:	009b      	lsls	r3, r3, #2
 8000998:	220f      	movs	r2, #15
 800099a:	fa02 f303 	lsl.w	r3, r2, r3
 800099e:	43db      	mvns	r3, r3
 80009a0:	69ba      	ldr	r2, [r7, #24]
 80009a2:	4013      	ands	r3, r2
 80009a4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	4a57      	ldr	r2, [pc, #348]	; (8000b08 <HAL_GPIO_Init+0x328>)
 80009aa:	4293      	cmp	r3, r2
 80009ac:	d037      	beq.n	8000a1e <HAL_GPIO_Init+0x23e>
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	4a56      	ldr	r2, [pc, #344]	; (8000b0c <HAL_GPIO_Init+0x32c>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d031      	beq.n	8000a1a <HAL_GPIO_Init+0x23a>
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	4a55      	ldr	r2, [pc, #340]	; (8000b10 <HAL_GPIO_Init+0x330>)
 80009ba:	4293      	cmp	r3, r2
 80009bc:	d02b      	beq.n	8000a16 <HAL_GPIO_Init+0x236>
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	4a54      	ldr	r2, [pc, #336]	; (8000b14 <HAL_GPIO_Init+0x334>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d025      	beq.n	8000a12 <HAL_GPIO_Init+0x232>
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	4a53      	ldr	r2, [pc, #332]	; (8000b18 <HAL_GPIO_Init+0x338>)
 80009ca:	4293      	cmp	r3, r2
 80009cc:	d01f      	beq.n	8000a0e <HAL_GPIO_Init+0x22e>
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4a52      	ldr	r2, [pc, #328]	; (8000b1c <HAL_GPIO_Init+0x33c>)
 80009d2:	4293      	cmp	r3, r2
 80009d4:	d019      	beq.n	8000a0a <HAL_GPIO_Init+0x22a>
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	4a51      	ldr	r2, [pc, #324]	; (8000b20 <HAL_GPIO_Init+0x340>)
 80009da:	4293      	cmp	r3, r2
 80009dc:	d013      	beq.n	8000a06 <HAL_GPIO_Init+0x226>
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	4a50      	ldr	r2, [pc, #320]	; (8000b24 <HAL_GPIO_Init+0x344>)
 80009e2:	4293      	cmp	r3, r2
 80009e4:	d00d      	beq.n	8000a02 <HAL_GPIO_Init+0x222>
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	4a4f      	ldr	r2, [pc, #316]	; (8000b28 <HAL_GPIO_Init+0x348>)
 80009ea:	4293      	cmp	r3, r2
 80009ec:	d007      	beq.n	80009fe <HAL_GPIO_Init+0x21e>
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	4a4e      	ldr	r2, [pc, #312]	; (8000b2c <HAL_GPIO_Init+0x34c>)
 80009f2:	4293      	cmp	r3, r2
 80009f4:	d101      	bne.n	80009fa <HAL_GPIO_Init+0x21a>
 80009f6:	2309      	movs	r3, #9
 80009f8:	e012      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 80009fa:	230a      	movs	r3, #10
 80009fc:	e010      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 80009fe:	2308      	movs	r3, #8
 8000a00:	e00e      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a02:	2307      	movs	r3, #7
 8000a04:	e00c      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a06:	2306      	movs	r3, #6
 8000a08:	e00a      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a0a:	2305      	movs	r3, #5
 8000a0c:	e008      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a0e:	2304      	movs	r3, #4
 8000a10:	e006      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a12:	2303      	movs	r3, #3
 8000a14:	e004      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a16:	2302      	movs	r3, #2
 8000a18:	e002      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a1a:	2301      	movs	r3, #1
 8000a1c:	e000      	b.n	8000a20 <HAL_GPIO_Init+0x240>
 8000a1e:	2300      	movs	r3, #0
 8000a20:	69fa      	ldr	r2, [r7, #28]
 8000a22:	f002 0203 	and.w	r2, r2, #3
 8000a26:	0092      	lsls	r2, r2, #2
 8000a28:	4093      	lsls	r3, r2
 8000a2a:	69ba      	ldr	r2, [r7, #24]
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000a30:	4934      	ldr	r1, [pc, #208]	; (8000b04 <HAL_GPIO_Init+0x324>)
 8000a32:	69fb      	ldr	r3, [r7, #28]
 8000a34:	089b      	lsrs	r3, r3, #2
 8000a36:	3302      	adds	r3, #2
 8000a38:	69ba      	ldr	r2, [r7, #24]
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000a3e:	4b3c      	ldr	r3, [pc, #240]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a44:	693b      	ldr	r3, [r7, #16]
 8000a46:	43db      	mvns	r3, r3
 8000a48:	69ba      	ldr	r2, [r7, #24]
 8000a4a:	4013      	ands	r3, r2
 8000a4c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000a4e:	683b      	ldr	r3, [r7, #0]
 8000a50:	685b      	ldr	r3, [r3, #4]
 8000a52:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d003      	beq.n	8000a62 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8000a5a:	69ba      	ldr	r2, [r7, #24]
 8000a5c:	693b      	ldr	r3, [r7, #16]
 8000a5e:	4313      	orrs	r3, r2
 8000a60:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000a62:	4a33      	ldr	r2, [pc, #204]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000a64:	69bb      	ldr	r3, [r7, #24]
 8000a66:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8000a68:	4b31      	ldr	r3, [pc, #196]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000a6a:	685b      	ldr	r3, [r3, #4]
 8000a6c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a6e:	693b      	ldr	r3, [r7, #16]
 8000a70:	43db      	mvns	r3, r3
 8000a72:	69ba      	ldr	r2, [r7, #24]
 8000a74:	4013      	ands	r3, r2
 8000a76:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000a78:	683b      	ldr	r3, [r7, #0]
 8000a7a:	685b      	ldr	r3, [r3, #4]
 8000a7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d003      	beq.n	8000a8c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8000a84:	69ba      	ldr	r2, [r7, #24]
 8000a86:	693b      	ldr	r3, [r7, #16]
 8000a88:	4313      	orrs	r3, r2
 8000a8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000a8c:	4a28      	ldr	r2, [pc, #160]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000a8e:	69bb      	ldr	r3, [r7, #24]
 8000a90:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000a92:	4b27      	ldr	r3, [pc, #156]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000a94:	689b      	ldr	r3, [r3, #8]
 8000a96:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000a98:	693b      	ldr	r3, [r7, #16]
 8000a9a:	43db      	mvns	r3, r3
 8000a9c:	69ba      	ldr	r2, [r7, #24]
 8000a9e:	4013      	ands	r3, r2
 8000aa0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	685b      	ldr	r3, [r3, #4]
 8000aa6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d003      	beq.n	8000ab6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8000aae:	69ba      	ldr	r2, [r7, #24]
 8000ab0:	693b      	ldr	r3, [r7, #16]
 8000ab2:	4313      	orrs	r3, r2
 8000ab4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ab6:	4a1e      	ldr	r2, [pc, #120]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000ab8:	69bb      	ldr	r3, [r7, #24]
 8000aba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000abc:	4b1c      	ldr	r3, [pc, #112]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000abe:	68db      	ldr	r3, [r3, #12]
 8000ac0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ac2:	693b      	ldr	r3, [r7, #16]
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	69ba      	ldr	r2, [r7, #24]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	685b      	ldr	r3, [r3, #4]
 8000ad0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000ad4:	2b00      	cmp	r3, #0
 8000ad6:	d003      	beq.n	8000ae0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8000ad8:	69ba      	ldr	r2, [r7, #24]
 8000ada:	693b      	ldr	r3, [r7, #16]
 8000adc:	4313      	orrs	r3, r2
 8000ade:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ae0:	4a13      	ldr	r2, [pc, #76]	; (8000b30 <HAL_GPIO_Init+0x350>)
 8000ae2:	69bb      	ldr	r3, [r7, #24]
 8000ae4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ae6:	69fb      	ldr	r3, [r7, #28]
 8000ae8:	3301      	adds	r3, #1
 8000aea:	61fb      	str	r3, [r7, #28]
 8000aec:	69fb      	ldr	r3, [r7, #28]
 8000aee:	2b0f      	cmp	r3, #15
 8000af0:	f67f ae84 	bls.w	80007fc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000af4:	bf00      	nop
 8000af6:	3724      	adds	r7, #36	; 0x24
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr
 8000b00:	40023800 	.word	0x40023800
 8000b04:	40013800 	.word	0x40013800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40020400 	.word	0x40020400
 8000b10:	40020800 	.word	0x40020800
 8000b14:	40020c00 	.word	0x40020c00
 8000b18:	40021000 	.word	0x40021000
 8000b1c:	40021400 	.word	0x40021400
 8000b20:	40021800 	.word	0x40021800
 8000b24:	40021c00 	.word	0x40021c00
 8000b28:	40022000 	.word	0x40022000
 8000b2c:	40022400 	.word	0x40022400
 8000b30:	40013c00 	.word	0x40013c00

08000b34 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000b34:	b480      	push	{r7}
 8000b36:	b083      	sub	sp, #12
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
 8000b3c:	460b      	mov	r3, r1
 8000b3e:	807b      	strh	r3, [r7, #2]
 8000b40:	4613      	mov	r3, r2
 8000b42:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000b44:	787b      	ldrb	r3, [r7, #1]
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d003      	beq.n	8000b52 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8000b4a:	887a      	ldrh	r2, [r7, #2]
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8000b50:	e003      	b.n	8000b5a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8000b52:	887b      	ldrh	r3, [r7, #2]
 8000b54:	041a      	lsls	r2, r3, #16
 8000b56:	687b      	ldr	r3, [r7, #4]
 8000b58:	619a      	str	r2, [r3, #24]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000b66:	b480      	push	{r7}
 8000b68:	b083      	sub	sp, #12
 8000b6a:	af00      	add	r7, sp, #0
 8000b6c:	6078      	str	r0, [r7, #4]
 8000b6e:	460b      	mov	r3, r1
 8000b70:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	695a      	ldr	r2, [r3, #20]
 8000b76:	887b      	ldrh	r3, [r7, #2]
 8000b78:	401a      	ands	r2, r3
 8000b7a:	887b      	ldrh	r3, [r7, #2]
 8000b7c:	429a      	cmp	r2, r3
 8000b7e:	d104      	bne.n	8000b8a <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8000b80:	887b      	ldrh	r3, [r7, #2]
 8000b82:	041a      	lsls	r2, r3, #16
 8000b84:	687b      	ldr	r3, [r7, #4]
 8000b86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8000b88:	e002      	b.n	8000b90 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8000b8a:	887a      	ldrh	r2, [r7, #2]
 8000b8c:	687b      	ldr	r3, [r7, #4]
 8000b8e:	619a      	str	r2, [r3, #24]
}
 8000b90:	bf00      	nop
 8000b92:	370c      	adds	r7, #12
 8000b94:	46bd      	mov	sp, r7
 8000b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b9a:	4770      	bx	lr

08000b9c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b082      	sub	sp, #8
 8000ba0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	603b      	str	r3, [r7, #0]
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_PWREx_EnableOverDrive+0x90>)
 8000bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bbe:	603b      	str	r3, [r7, #0]
 8000bc0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8000bc2:	4b1b      	ldr	r3, [pc, #108]	; (8000c30 <HAL_PWREx_EnableOverDrive+0x94>)
 8000bc4:	2201      	movs	r2, #1
 8000bc6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bc8:	f7ff fcf6 	bl	80005b8 <HAL_GetTick>
 8000bcc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000bce:	e009      	b.n	8000be4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000bd0:	f7ff fcf2 	bl	80005b8 <HAL_GetTick>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	1ad3      	subs	r3, r2, r3
 8000bda:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000bde:	d901      	bls.n	8000be4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8000be0:	2303      	movs	r3, #3
 8000be2:	e01f      	b.n	8000c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8000be4:	4b13      	ldr	r3, [pc, #76]	; (8000c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bf0:	d1ee      	bne.n	8000bd0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8000bf2:	4b11      	ldr	r3, [pc, #68]	; (8000c38 <HAL_PWREx_EnableOverDrive+0x9c>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8000bf8:	f7ff fcde 	bl	80005b8 <HAL_GetTick>
 8000bfc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000bfe:	e009      	b.n	8000c14 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8000c00:	f7ff fcda 	bl	80005b8 <HAL_GetTick>
 8000c04:	4602      	mov	r2, r0
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	1ad3      	subs	r3, r2, r3
 8000c0a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8000c0e:	d901      	bls.n	8000c14 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8000c10:	2303      	movs	r3, #3
 8000c12:	e007      	b.n	8000c24 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <HAL_PWREx_EnableOverDrive+0x98>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c1c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8000c20:	d1ee      	bne.n	8000c00 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8000c22:	2300      	movs	r3, #0
}
 8000c24:	4618      	mov	r0, r3
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	420e0040 	.word	0x420e0040
 8000c34:	40007000 	.word	0x40007000
 8000c38:	420e0044 	.word	0x420e0044

08000c3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b086      	sub	sp, #24
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d101      	bne.n	8000c4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c4a:	2301      	movs	r3, #1
 8000c4c:	e22d      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	f003 0301 	and.w	r3, r3, #1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d075      	beq.n	8000d46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c5a:	4ba3      	ldr	r3, [pc, #652]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000c5c:	689b      	ldr	r3, [r3, #8]
 8000c5e:	f003 030c 	and.w	r3, r3, #12
 8000c62:	2b04      	cmp	r3, #4
 8000c64:	d00c      	beq.n	8000c80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c66:	4ba0      	ldr	r3, [pc, #640]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c6e:	2b08      	cmp	r3, #8
 8000c70:	d112      	bne.n	8000c98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c72:	4b9d      	ldr	r3, [pc, #628]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000c74:	685b      	ldr	r3, [r3, #4]
 8000c76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c7e:	d10b      	bne.n	8000c98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c80:	4b99      	ldr	r3, [pc, #612]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c88:	2b00      	cmp	r3, #0
 8000c8a:	d05b      	beq.n	8000d44 <HAL_RCC_OscConfig+0x108>
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	685b      	ldr	r3, [r3, #4]
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d157      	bne.n	8000d44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c94:	2301      	movs	r3, #1
 8000c96:	e208      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	685b      	ldr	r3, [r3, #4]
 8000c9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ca0:	d106      	bne.n	8000cb0 <HAL_RCC_OscConfig+0x74>
 8000ca2:	4b91      	ldr	r3, [pc, #580]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000ca4:	681b      	ldr	r3, [r3, #0]
 8000ca6:	4a90      	ldr	r2, [pc, #576]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000ca8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cac:	6013      	str	r3, [r2, #0]
 8000cae:	e01d      	b.n	8000cec <HAL_RCC_OscConfig+0xb0>
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000cb8:	d10c      	bne.n	8000cd4 <HAL_RCC_OscConfig+0x98>
 8000cba:	4b8b      	ldr	r3, [pc, #556]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000cbc:	681b      	ldr	r3, [r3, #0]
 8000cbe:	4a8a      	ldr	r2, [pc, #552]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000cc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000cc4:	6013      	str	r3, [r2, #0]
 8000cc6:	4b88      	ldr	r3, [pc, #544]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	4a87      	ldr	r2, [pc, #540]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000ccc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cd0:	6013      	str	r3, [r2, #0]
 8000cd2:	e00b      	b.n	8000cec <HAL_RCC_OscConfig+0xb0>
 8000cd4:	4b84      	ldr	r3, [pc, #528]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	4a83      	ldr	r2, [pc, #524]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000cda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cde:	6013      	str	r3, [r2, #0]
 8000ce0:	4b81      	ldr	r3, [pc, #516]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a80      	ldr	r2, [pc, #512]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000ce6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d013      	beq.n	8000d1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cf4:	f7ff fc60 	bl	80005b8 <HAL_GetTick>
 8000cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cfa:	e008      	b.n	8000d0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000cfc:	f7ff fc5c 	bl	80005b8 <HAL_GetTick>
 8000d00:	4602      	mov	r2, r0
 8000d02:	693b      	ldr	r3, [r7, #16]
 8000d04:	1ad3      	subs	r3, r2, r3
 8000d06:	2b64      	cmp	r3, #100	; 0x64
 8000d08:	d901      	bls.n	8000d0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	e1cd      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000d0e:	4b76      	ldr	r3, [pc, #472]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d16:	2b00      	cmp	r3, #0
 8000d18:	d0f0      	beq.n	8000cfc <HAL_RCC_OscConfig+0xc0>
 8000d1a:	e014      	b.n	8000d46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d1c:	f7ff fc4c 	bl	80005b8 <HAL_GetTick>
 8000d20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d22:	e008      	b.n	8000d36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d24:	f7ff fc48 	bl	80005b8 <HAL_GetTick>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	693b      	ldr	r3, [r7, #16]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b64      	cmp	r3, #100	; 0x64
 8000d30:	d901      	bls.n	8000d36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d32:	2303      	movs	r3, #3
 8000d34:	e1b9      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d36:	4b6c      	ldr	r3, [pc, #432]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d1f0      	bne.n	8000d24 <HAL_RCC_OscConfig+0xe8>
 8000d42:	e000      	b.n	8000d46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d063      	beq.n	8000e1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d52:	4b65      	ldr	r3, [pc, #404]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d54:	689b      	ldr	r3, [r3, #8]
 8000d56:	f003 030c 	and.w	r3, r3, #12
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d00b      	beq.n	8000d76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d5e:	4b62      	ldr	r3, [pc, #392]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d60:	689b      	ldr	r3, [r3, #8]
 8000d62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d66:	2b08      	cmp	r3, #8
 8000d68:	d11c      	bne.n	8000da4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d6a:	4b5f      	ldr	r3, [pc, #380]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d6c:	685b      	ldr	r3, [r3, #4]
 8000d6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d116      	bne.n	8000da4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d76:	4b5c      	ldr	r3, [pc, #368]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d78:	681b      	ldr	r3, [r3, #0]
 8000d7a:	f003 0302 	and.w	r3, r3, #2
 8000d7e:	2b00      	cmp	r3, #0
 8000d80:	d005      	beq.n	8000d8e <HAL_RCC_OscConfig+0x152>
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	68db      	ldr	r3, [r3, #12]
 8000d86:	2b01      	cmp	r3, #1
 8000d88:	d001      	beq.n	8000d8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d8a:	2301      	movs	r3, #1
 8000d8c:	e18d      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d8e:	4b56      	ldr	r3, [pc, #344]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	691b      	ldr	r3, [r3, #16]
 8000d9a:	00db      	lsls	r3, r3, #3
 8000d9c:	4952      	ldr	r1, [pc, #328]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000d9e:	4313      	orrs	r3, r2
 8000da0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000da2:	e03a      	b.n	8000e1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	68db      	ldr	r3, [r3, #12]
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d020      	beq.n	8000dee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000dac:	4b4f      	ldr	r3, [pc, #316]	; (8000eec <HAL_RCC_OscConfig+0x2b0>)
 8000dae:	2201      	movs	r2, #1
 8000db0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000db2:	f7ff fc01 	bl	80005b8 <HAL_GetTick>
 8000db6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db8:	e008      	b.n	8000dcc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dba:	f7ff fbfd 	bl	80005b8 <HAL_GetTick>
 8000dbe:	4602      	mov	r2, r0
 8000dc0:	693b      	ldr	r3, [r7, #16]
 8000dc2:	1ad3      	subs	r3, r2, r3
 8000dc4:	2b02      	cmp	r3, #2
 8000dc6:	d901      	bls.n	8000dcc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000dc8:	2303      	movs	r3, #3
 8000dca:	e16e      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000dcc:	4b46      	ldr	r3, [pc, #280]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0302 	and.w	r3, r3, #2
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	d0f0      	beq.n	8000dba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dd8:	4b43      	ldr	r3, [pc, #268]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000dda:	681b      	ldr	r3, [r3, #0]
 8000ddc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	691b      	ldr	r3, [r3, #16]
 8000de4:	00db      	lsls	r3, r3, #3
 8000de6:	4940      	ldr	r1, [pc, #256]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000de8:	4313      	orrs	r3, r2
 8000dea:	600b      	str	r3, [r1, #0]
 8000dec:	e015      	b.n	8000e1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dee:	4b3f      	ldr	r3, [pc, #252]	; (8000eec <HAL_RCC_OscConfig+0x2b0>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000df4:	f7ff fbe0 	bl	80005b8 <HAL_GetTick>
 8000df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dfa:	e008      	b.n	8000e0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000dfc:	f7ff fbdc 	bl	80005b8 <HAL_GetTick>
 8000e00:	4602      	mov	r2, r0
 8000e02:	693b      	ldr	r3, [r7, #16]
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	2b02      	cmp	r3, #2
 8000e08:	d901      	bls.n	8000e0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000e0a:	2303      	movs	r3, #3
 8000e0c:	e14d      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000e0e:	4b36      	ldr	r3, [pc, #216]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	f003 0302 	and.w	r3, r3, #2
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d1f0      	bne.n	8000dfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000e1a:	687b      	ldr	r3, [r7, #4]
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f003 0308 	and.w	r3, r3, #8
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d030      	beq.n	8000e88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	695b      	ldr	r3, [r3, #20]
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d016      	beq.n	8000e5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e2e:	4b30      	ldr	r3, [pc, #192]	; (8000ef0 <HAL_RCC_OscConfig+0x2b4>)
 8000e30:	2201      	movs	r2, #1
 8000e32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e34:	f7ff fbc0 	bl	80005b8 <HAL_GetTick>
 8000e38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e3a:	e008      	b.n	8000e4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e3c:	f7ff fbbc 	bl	80005b8 <HAL_GetTick>
 8000e40:	4602      	mov	r2, r0
 8000e42:	693b      	ldr	r3, [r7, #16]
 8000e44:	1ad3      	subs	r3, r2, r3
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d901      	bls.n	8000e4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e4a:	2303      	movs	r3, #3
 8000e4c:	e12d      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e4e:	4b26      	ldr	r3, [pc, #152]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000e50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e52:	f003 0302 	and.w	r3, r3, #2
 8000e56:	2b00      	cmp	r3, #0
 8000e58:	d0f0      	beq.n	8000e3c <HAL_RCC_OscConfig+0x200>
 8000e5a:	e015      	b.n	8000e88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e5c:	4b24      	ldr	r3, [pc, #144]	; (8000ef0 <HAL_RCC_OscConfig+0x2b4>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e62:	f7ff fba9 	bl	80005b8 <HAL_GetTick>
 8000e66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e68:	e008      	b.n	8000e7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e6a:	f7ff fba5 	bl	80005b8 <HAL_GetTick>
 8000e6e:	4602      	mov	r2, r0
 8000e70:	693b      	ldr	r3, [r7, #16]
 8000e72:	1ad3      	subs	r3, r2, r3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d901      	bls.n	8000e7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	e116      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000e7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e80:	f003 0302 	and.w	r3, r3, #2
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d1f0      	bne.n	8000e6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	f003 0304 	and.w	r3, r3, #4
 8000e90:	2b00      	cmp	r3, #0
 8000e92:	f000 80a0 	beq.w	8000fd6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e96:	2300      	movs	r3, #0
 8000e98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e9a:	4b13      	ldr	r3, [pc, #76]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d10f      	bne.n	8000ec6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	60fb      	str	r3, [r7, #12]
 8000eaa:	4b0f      	ldr	r3, [pc, #60]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000eac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eae:	4a0e      	ldr	r2, [pc, #56]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000eb4:	6413      	str	r3, [r2, #64]	; 0x40
 8000eb6:	4b0c      	ldr	r3, [pc, #48]	; (8000ee8 <HAL_RCC_OscConfig+0x2ac>)
 8000eb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ebe:	60fb      	str	r3, [r7, #12]
 8000ec0:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ec6:	4b0b      	ldr	r3, [pc, #44]	; (8000ef4 <HAL_RCC_OscConfig+0x2b8>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d121      	bne.n	8000f16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ed2:	4b08      	ldr	r3, [pc, #32]	; (8000ef4 <HAL_RCC_OscConfig+0x2b8>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a07      	ldr	r2, [pc, #28]	; (8000ef4 <HAL_RCC_OscConfig+0x2b8>)
 8000ed8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000edc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ede:	f7ff fb6b 	bl	80005b8 <HAL_GetTick>
 8000ee2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee4:	e011      	b.n	8000f0a <HAL_RCC_OscConfig+0x2ce>
 8000ee6:	bf00      	nop
 8000ee8:	40023800 	.word	0x40023800
 8000eec:	42470000 	.word	0x42470000
 8000ef0:	42470e80 	.word	0x42470e80
 8000ef4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ef8:	f7ff fb5e 	bl	80005b8 <HAL_GetTick>
 8000efc:	4602      	mov	r2, r0
 8000efe:	693b      	ldr	r3, [r7, #16]
 8000f00:	1ad3      	subs	r3, r2, r3
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d901      	bls.n	8000f0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8000f06:	2303      	movs	r3, #3
 8000f08:	e0cf      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000f0a:	4b6a      	ldr	r3, [pc, #424]	; (80010b4 <HAL_RCC_OscConfig+0x478>)
 8000f0c:	681b      	ldr	r3, [r3, #0]
 8000f0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d0f0      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	689b      	ldr	r3, [r3, #8]
 8000f1a:	2b01      	cmp	r3, #1
 8000f1c:	d106      	bne.n	8000f2c <HAL_RCC_OscConfig+0x2f0>
 8000f1e:	4b66      	ldr	r3, [pc, #408]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f22:	4a65      	ldr	r2, [pc, #404]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2a:	e01c      	b.n	8000f66 <HAL_RCC_OscConfig+0x32a>
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	689b      	ldr	r3, [r3, #8]
 8000f30:	2b05      	cmp	r3, #5
 8000f32:	d10c      	bne.n	8000f4e <HAL_RCC_OscConfig+0x312>
 8000f34:	4b60      	ldr	r3, [pc, #384]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f38:	4a5f      	ldr	r2, [pc, #380]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f3a:	f043 0304 	orr.w	r3, r3, #4
 8000f3e:	6713      	str	r3, [r2, #112]	; 0x70
 8000f40:	4b5d      	ldr	r3, [pc, #372]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f44:	4a5c      	ldr	r2, [pc, #368]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f46:	f043 0301 	orr.w	r3, r3, #1
 8000f4a:	6713      	str	r3, [r2, #112]	; 0x70
 8000f4c:	e00b      	b.n	8000f66 <HAL_RCC_OscConfig+0x32a>
 8000f4e:	4b5a      	ldr	r3, [pc, #360]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f52:	4a59      	ldr	r2, [pc, #356]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6713      	str	r3, [r2, #112]	; 0x70
 8000f5a:	4b57      	ldr	r3, [pc, #348]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f5e:	4a56      	ldr	r2, [pc, #344]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f60:	f023 0304 	bic.w	r3, r3, #4
 8000f64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d015      	beq.n	8000f9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f6e:	f7ff fb23 	bl	80005b8 <HAL_GetTick>
 8000f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f74:	e00a      	b.n	8000f8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f76:	f7ff fb1f 	bl	80005b8 <HAL_GetTick>
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	693b      	ldr	r3, [r7, #16]
 8000f7e:	1ad3      	subs	r3, r2, r3
 8000f80:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f84:	4293      	cmp	r3, r2
 8000f86:	d901      	bls.n	8000f8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8000f88:	2303      	movs	r3, #3
 8000f8a:	e08e      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f8c:	4b4a      	ldr	r3, [pc, #296]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000f8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f90:	f003 0302 	and.w	r3, r3, #2
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d0ee      	beq.n	8000f76 <HAL_RCC_OscConfig+0x33a>
 8000f98:	e014      	b.n	8000fc4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f9a:	f7ff fb0d 	bl	80005b8 <HAL_GetTick>
 8000f9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fa0:	e00a      	b.n	8000fb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000fa2:	f7ff fb09 	bl	80005b8 <HAL_GetTick>
 8000fa6:	4602      	mov	r2, r0
 8000fa8:	693b      	ldr	r3, [r7, #16]
 8000faa:	1ad3      	subs	r3, r2, r3
 8000fac:	f241 3288 	movw	r2, #5000	; 0x1388
 8000fb0:	4293      	cmp	r3, r2
 8000fb2:	d901      	bls.n	8000fb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	e078      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000fb8:	4b3f      	ldr	r3, [pc, #252]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000fba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000fbc:	f003 0302 	and.w	r3, r3, #2
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d1ee      	bne.n	8000fa2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fc4:	7dfb      	ldrb	r3, [r7, #23]
 8000fc6:	2b01      	cmp	r3, #1
 8000fc8:	d105      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fca:	4b3b      	ldr	r3, [pc, #236]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fce:	4a3a      	ldr	r2, [pc, #232]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000fd0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fd4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	699b      	ldr	r3, [r3, #24]
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d064      	beq.n	80010a8 <HAL_RCC_OscConfig+0x46c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fde:	4b36      	ldr	r3, [pc, #216]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f003 030c 	and.w	r3, r3, #12
 8000fe6:	2b08      	cmp	r3, #8
 8000fe8:	d05c      	beq.n	80010a4 <HAL_RCC_OscConfig+0x468>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	699b      	ldr	r3, [r3, #24]
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d141      	bne.n	8001076 <HAL_RCC_OscConfig+0x43a>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000ff2:	4b32      	ldr	r3, [pc, #200]	; (80010bc <HAL_RCC_OscConfig+0x480>)
 8000ff4:	2200      	movs	r2, #0
 8000ff6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000ff8:	f7ff fade 	bl	80005b8 <HAL_GetTick>
 8000ffc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ffe:	e008      	b.n	8001012 <HAL_RCC_OscConfig+0x3d6>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001000:	f7ff fada 	bl	80005b8 <HAL_GetTick>
 8001004:	4602      	mov	r2, r0
 8001006:	693b      	ldr	r3, [r7, #16]
 8001008:	1ad3      	subs	r3, r2, r3
 800100a:	2b02      	cmp	r3, #2
 800100c:	d901      	bls.n	8001012 <HAL_RCC_OscConfig+0x3d6>
          {
            return HAL_TIMEOUT;
 800100e:	2303      	movs	r3, #3
 8001010:	e04b      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001012:	4b29      	ldr	r3, [pc, #164]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800101a:	2b00      	cmp	r3, #0
 800101c:	d1f0      	bne.n	8001000 <HAL_RCC_OscConfig+0x3c4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	69da      	ldr	r2, [r3, #28]
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6a1b      	ldr	r3, [r3, #32]
 8001026:	431a      	orrs	r2, r3
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800102c:	019b      	lsls	r3, r3, #6
 800102e:	431a      	orrs	r2, r3
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001034:	085b      	lsrs	r3, r3, #1
 8001036:	3b01      	subs	r3, #1
 8001038:	041b      	lsls	r3, r3, #16
 800103a:	431a      	orrs	r2, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001040:	061b      	lsls	r3, r3, #24
 8001042:	491d      	ldr	r1, [pc, #116]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8001044:	4313      	orrs	r3, r2
 8001046:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001048:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <HAL_RCC_OscConfig+0x480>)
 800104a:	2201      	movs	r2, #1
 800104c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800104e:	f7ff fab3 	bl	80005b8 <HAL_GetTick>
 8001052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001054:	e008      	b.n	8001068 <HAL_RCC_OscConfig+0x42c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001056:	f7ff faaf 	bl	80005b8 <HAL_GetTick>
 800105a:	4602      	mov	r2, r0
 800105c:	693b      	ldr	r3, [r7, #16]
 800105e:	1ad3      	subs	r3, r2, r3
 8001060:	2b02      	cmp	r3, #2
 8001062:	d901      	bls.n	8001068 <HAL_RCC_OscConfig+0x42c>
          {
            return HAL_TIMEOUT;
 8001064:	2303      	movs	r3, #3
 8001066:	e020      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001068:	4b13      	ldr	r3, [pc, #76]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001070:	2b00      	cmp	r3, #0
 8001072:	d0f0      	beq.n	8001056 <HAL_RCC_OscConfig+0x41a>
 8001074:	e018      	b.n	80010a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001076:	4b11      	ldr	r3, [pc, #68]	; (80010bc <HAL_RCC_OscConfig+0x480>)
 8001078:	2200      	movs	r2, #0
 800107a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800107c:	f7ff fa9c 	bl	80005b8 <HAL_GetTick>
 8001080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001082:	e008      	b.n	8001096 <HAL_RCC_OscConfig+0x45a>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001084:	f7ff fa98 	bl	80005b8 <HAL_GetTick>
 8001088:	4602      	mov	r2, r0
 800108a:	693b      	ldr	r3, [r7, #16]
 800108c:	1ad3      	subs	r3, r2, r3
 800108e:	2b02      	cmp	r3, #2
 8001090:	d901      	bls.n	8001096 <HAL_RCC_OscConfig+0x45a>
          {
            return HAL_TIMEOUT;
 8001092:	2303      	movs	r3, #3
 8001094:	e009      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001096:	4b08      	ldr	r3, [pc, #32]	; (80010b8 <HAL_RCC_OscConfig+0x47c>)
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d1f0      	bne.n	8001084 <HAL_RCC_OscConfig+0x448>
 80010a2:	e001      	b.n	80010a8 <HAL_RCC_OscConfig+0x46c>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 80010a4:	2301      	movs	r3, #1
 80010a6:	e000      	b.n	80010aa <HAL_RCC_OscConfig+0x46e>
    }
  }
  return HAL_OK;
 80010a8:	2300      	movs	r3, #0
}
 80010aa:	4618      	mov	r0, r3
 80010ac:	3718      	adds	r7, #24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	40007000 	.word	0x40007000
 80010b8:	40023800 	.word	0x40023800
 80010bc:	42470060 	.word	0x42470060

080010c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b084      	sub	sp, #16
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
 80010c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d101      	bne.n	80010d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010d0:	2301      	movs	r3, #1
 80010d2:	e0ca      	b.n	800126a <HAL_RCC_ClockConfig+0x1aa>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010d4:	4b67      	ldr	r3, [pc, #412]	; (8001274 <HAL_RCC_ClockConfig+0x1b4>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f003 030f 	and.w	r3, r3, #15
 80010dc:	683a      	ldr	r2, [r7, #0]
 80010de:	429a      	cmp	r2, r3
 80010e0:	d90c      	bls.n	80010fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010e2:	4b64      	ldr	r3, [pc, #400]	; (8001274 <HAL_RCC_ClockConfig+0x1b4>)
 80010e4:	683a      	ldr	r2, [r7, #0]
 80010e6:	b2d2      	uxtb	r2, r2
 80010e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ea:	4b62      	ldr	r3, [pc, #392]	; (8001274 <HAL_RCC_ClockConfig+0x1b4>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	f003 030f 	and.w	r3, r3, #15
 80010f2:	683a      	ldr	r2, [r7, #0]
 80010f4:	429a      	cmp	r2, r3
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e0b6      	b.n	800126a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	f003 0302 	and.w	r3, r3, #2
 8001104:	2b00      	cmp	r3, #0
 8001106:	d020      	beq.n	800114a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	2b00      	cmp	r3, #0
 8001112:	d005      	beq.n	8001120 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001114:	4b58      	ldr	r3, [pc, #352]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001116:	689b      	ldr	r3, [r3, #8]
 8001118:	4a57      	ldr	r2, [pc, #348]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 800111a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800111e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	2b00      	cmp	r3, #0
 800112a:	d005      	beq.n	8001138 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800112c:	4b52      	ldr	r3, [pc, #328]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 800112e:	689b      	ldr	r3, [r3, #8]
 8001130:	4a51      	ldr	r2, [pc, #324]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001132:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001136:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001138:	4b4f      	ldr	r3, [pc, #316]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 800113a:	689b      	ldr	r3, [r3, #8]
 800113c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	494c      	ldr	r1, [pc, #304]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001146:	4313      	orrs	r3, r2
 8001148:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	f003 0301 	and.w	r3, r3, #1
 8001152:	2b00      	cmp	r3, #0
 8001154:	d044      	beq.n	80011e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	2b01      	cmp	r3, #1
 800115c:	d107      	bne.n	800116e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800115e:	4b46      	ldr	r3, [pc, #280]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001166:	2b00      	cmp	r3, #0
 8001168:	d119      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e07d      	b.n	800126a <HAL_RCC_ClockConfig+0x1aa>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	2b02      	cmp	r3, #2
 8001174:	d003      	beq.n	800117e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800117a:	2b03      	cmp	r3, #3
 800117c:	d107      	bne.n	800118e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800117e:	4b3e      	ldr	r3, [pc, #248]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001186:	2b00      	cmp	r3, #0
 8001188:	d109      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800118a:	2301      	movs	r3, #1
 800118c:	e06d      	b.n	800126a <HAL_RCC_ClockConfig+0x1aa>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800118e:	4b3a      	ldr	r3, [pc, #232]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d101      	bne.n	800119e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800119a:	2301      	movs	r3, #1
 800119c:	e065      	b.n	800126a <HAL_RCC_ClockConfig+0x1aa>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800119e:	4b36      	ldr	r3, [pc, #216]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f023 0203 	bic.w	r2, r3, #3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	4933      	ldr	r1, [pc, #204]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 80011ac:	4313      	orrs	r3, r2
 80011ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80011b0:	f7ff fa02 	bl	80005b8 <HAL_GetTick>
 80011b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011b6:	e00a      	b.n	80011ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80011b8:	f7ff f9fe 	bl	80005b8 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d901      	bls.n	80011ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80011ca:	2303      	movs	r3, #3
 80011cc:	e04d      	b.n	800126a <HAL_RCC_ClockConfig+0x1aa>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80011ce:	4b2a      	ldr	r3, [pc, #168]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 80011d0:	689b      	ldr	r3, [r3, #8]
 80011d2:	f003 020c 	and.w	r2, r3, #12
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	009b      	lsls	r3, r3, #2
 80011dc:	429a      	cmp	r2, r3
 80011de:	d1eb      	bne.n	80011b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <HAL_RCC_ClockConfig+0x1b4>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f003 030f 	and.w	r3, r3, #15
 80011e8:	683a      	ldr	r2, [r7, #0]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	d20c      	bcs.n	8001208 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011ee:	4b21      	ldr	r3, [pc, #132]	; (8001274 <HAL_RCC_ClockConfig+0x1b4>)
 80011f0:	683a      	ldr	r2, [r7, #0]
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011f6:	4b1f      	ldr	r3, [pc, #124]	; (8001274 <HAL_RCC_ClockConfig+0x1b4>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 030f 	and.w	r3, r3, #15
 80011fe:	683a      	ldr	r2, [r7, #0]
 8001200:	429a      	cmp	r2, r3
 8001202:	d001      	beq.n	8001208 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e030      	b.n	800126a <HAL_RCC_ClockConfig+0x1aa>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	f003 0304 	and.w	r3, r3, #4
 8001210:	2b00      	cmp	r3, #0
 8001212:	d008      	beq.n	8001226 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001214:	4b18      	ldr	r3, [pc, #96]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001216:	689b      	ldr	r3, [r3, #8]
 8001218:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	4915      	ldr	r1, [pc, #84]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001222:	4313      	orrs	r3, r2
 8001224:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f003 0308 	and.w	r3, r3, #8
 800122e:	2b00      	cmp	r3, #0
 8001230:	d009      	beq.n	8001246 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001232:	4b11      	ldr	r3, [pc, #68]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001234:	689b      	ldr	r3, [r3, #8]
 8001236:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	691b      	ldr	r3, [r3, #16]
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	490d      	ldr	r1, [pc, #52]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 8001242:	4313      	orrs	r3, r2
 8001244:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001246:	f000 f81d 	bl	8001284 <HAL_RCC_GetSysClockFreq>
 800124a:	4601      	mov	r1, r0
 800124c:	4b0a      	ldr	r3, [pc, #40]	; (8001278 <HAL_RCC_ClockConfig+0x1b8>)
 800124e:	689b      	ldr	r3, [r3, #8]
 8001250:	091b      	lsrs	r3, r3, #4
 8001252:	f003 030f 	and.w	r3, r3, #15
 8001256:	4a09      	ldr	r2, [pc, #36]	; (800127c <HAL_RCC_ClockConfig+0x1bc>)
 8001258:	5cd3      	ldrb	r3, [r2, r3]
 800125a:	fa21 f303 	lsr.w	r3, r1, r3
 800125e:	4a08      	ldr	r2, [pc, #32]	; (8001280 <HAL_RCC_ClockConfig+0x1c0>)
 8001260:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (TICK_INT_PRIORITY);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff f964 	bl	8000530 <HAL_InitTick>

  return HAL_OK;
 8001268:	2300      	movs	r3, #0
}
 800126a:	4618      	mov	r0, r3
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	40023c00 	.word	0x40023c00
 8001278:	40023800 	.word	0x40023800
 800127c:	0800221c 	.word	0x0800221c
 8001280:	20000008 	.word	0x20000008

08001284 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001284:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800128a:	2300      	movs	r3, #0
 800128c:	607b      	str	r3, [r7, #4]
 800128e:	2300      	movs	r3, #0
 8001290:	60fb      	str	r3, [r7, #12]
 8001292:	2300      	movs	r3, #0
 8001294:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001296:	2300      	movs	r3, #0
 8001298:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800129a:	4b50      	ldr	r3, [pc, #320]	; (80013dc <HAL_RCC_GetSysClockFreq+0x158>)
 800129c:	689b      	ldr	r3, [r3, #8]
 800129e:	f003 030c 	and.w	r3, r3, #12
 80012a2:	2b04      	cmp	r3, #4
 80012a4:	d007      	beq.n	80012b6 <HAL_RCC_GetSysClockFreq+0x32>
 80012a6:	2b08      	cmp	r3, #8
 80012a8:	d008      	beq.n	80012bc <HAL_RCC_GetSysClockFreq+0x38>
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	f040 808d 	bne.w	80013ca <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80012b0:	4b4b      	ldr	r3, [pc, #300]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80012b2:	60bb      	str	r3, [r7, #8]
       break;
 80012b4:	e08c      	b.n	80013d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80012b6:	4b4b      	ldr	r3, [pc, #300]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80012b8:	60bb      	str	r3, [r7, #8]
      break;
 80012ba:	e089      	b.n	80013d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80012bc:	4b47      	ldr	r3, [pc, #284]	; (80013dc <HAL_RCC_GetSysClockFreq+0x158>)
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012c4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012c6:	4b45      	ldr	r3, [pc, #276]	; (80013dc <HAL_RCC_GetSysClockFreq+0x158>)
 80012c8:	685b      	ldr	r3, [r3, #4]
 80012ca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d023      	beq.n	800131a <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012d2:	4b42      	ldr	r3, [pc, #264]	; (80013dc <HAL_RCC_GetSysClockFreq+0x158>)
 80012d4:	685b      	ldr	r3, [r3, #4]
 80012d6:	099b      	lsrs	r3, r3, #6
 80012d8:	f04f 0400 	mov.w	r4, #0
 80012dc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80012e0:	f04f 0200 	mov.w	r2, #0
 80012e4:	ea03 0501 	and.w	r5, r3, r1
 80012e8:	ea04 0602 	and.w	r6, r4, r2
 80012ec:	4a3d      	ldr	r2, [pc, #244]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80012ee:	fb02 f106 	mul.w	r1, r2, r6
 80012f2:	2200      	movs	r2, #0
 80012f4:	fb02 f205 	mul.w	r2, r2, r5
 80012f8:	440a      	add	r2, r1
 80012fa:	493a      	ldr	r1, [pc, #232]	; (80013e4 <HAL_RCC_GetSysClockFreq+0x160>)
 80012fc:	fba5 0101 	umull	r0, r1, r5, r1
 8001300:	1853      	adds	r3, r2, r1
 8001302:	4619      	mov	r1, r3
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	f04f 0400 	mov.w	r4, #0
 800130a:	461a      	mov	r2, r3
 800130c:	4623      	mov	r3, r4
 800130e:	f7fe ff6d 	bl	80001ec <__aeabi_uldivmod>
 8001312:	4603      	mov	r3, r0
 8001314:	460c      	mov	r4, r1
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	e049      	b.n	80013ae <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800131a:	4b30      	ldr	r3, [pc, #192]	; (80013dc <HAL_RCC_GetSysClockFreq+0x158>)
 800131c:	685b      	ldr	r3, [r3, #4]
 800131e:	099b      	lsrs	r3, r3, #6
 8001320:	f04f 0400 	mov.w	r4, #0
 8001324:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001328:	f04f 0200 	mov.w	r2, #0
 800132c:	ea03 0501 	and.w	r5, r3, r1
 8001330:	ea04 0602 	and.w	r6, r4, r2
 8001334:	4629      	mov	r1, r5
 8001336:	4632      	mov	r2, r6
 8001338:	f04f 0300 	mov.w	r3, #0
 800133c:	f04f 0400 	mov.w	r4, #0
 8001340:	0154      	lsls	r4, r2, #5
 8001342:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001346:	014b      	lsls	r3, r1, #5
 8001348:	4619      	mov	r1, r3
 800134a:	4622      	mov	r2, r4
 800134c:	1b49      	subs	r1, r1, r5
 800134e:	eb62 0206 	sbc.w	r2, r2, r6
 8001352:	f04f 0300 	mov.w	r3, #0
 8001356:	f04f 0400 	mov.w	r4, #0
 800135a:	0194      	lsls	r4, r2, #6
 800135c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001360:	018b      	lsls	r3, r1, #6
 8001362:	1a5b      	subs	r3, r3, r1
 8001364:	eb64 0402 	sbc.w	r4, r4, r2
 8001368:	f04f 0100 	mov.w	r1, #0
 800136c:	f04f 0200 	mov.w	r2, #0
 8001370:	00e2      	lsls	r2, r4, #3
 8001372:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001376:	00d9      	lsls	r1, r3, #3
 8001378:	460b      	mov	r3, r1
 800137a:	4614      	mov	r4, r2
 800137c:	195b      	adds	r3, r3, r5
 800137e:	eb44 0406 	adc.w	r4, r4, r6
 8001382:	f04f 0100 	mov.w	r1, #0
 8001386:	f04f 0200 	mov.w	r2, #0
 800138a:	02a2      	lsls	r2, r4, #10
 800138c:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001390:	0299      	lsls	r1, r3, #10
 8001392:	460b      	mov	r3, r1
 8001394:	4614      	mov	r4, r2
 8001396:	4618      	mov	r0, r3
 8001398:	4621      	mov	r1, r4
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f04f 0400 	mov.w	r4, #0
 80013a0:	461a      	mov	r2, r3
 80013a2:	4623      	mov	r3, r4
 80013a4:	f7fe ff22 	bl	80001ec <__aeabi_uldivmod>
 80013a8:	4603      	mov	r3, r0
 80013aa:	460c      	mov	r4, r1
 80013ac:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80013ae:	4b0b      	ldr	r3, [pc, #44]	; (80013dc <HAL_RCC_GetSysClockFreq+0x158>)
 80013b0:	685b      	ldr	r3, [r3, #4]
 80013b2:	0c1b      	lsrs	r3, r3, #16
 80013b4:	f003 0303 	and.w	r3, r3, #3
 80013b8:	3301      	adds	r3, #1
 80013ba:	005b      	lsls	r3, r3, #1
 80013bc:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80013be:	68fa      	ldr	r2, [r7, #12]
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013c6:	60bb      	str	r3, [r7, #8]
      break;
 80013c8:	e002      	b.n	80013d0 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80013ca:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <HAL_RCC_GetSysClockFreq+0x15c>)
 80013cc:	60bb      	str	r3, [r7, #8]
      break;
 80013ce:	bf00      	nop
    }
  }
  return sysclockfreq;
 80013d0:	68bb      	ldr	r3, [r7, #8]
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	3714      	adds	r7, #20
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80013da:	bf00      	nop
 80013dc:	40023800 	.word	0x40023800
 80013e0:	00f42400 	.word	0x00f42400
 80013e4:	017d7840 	.word	0x017d7840

080013e8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08a      	sub	sp, #40	; 0x28
 80013ec:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ee:	f107 0314 	add.w	r3, r7, #20
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	613b      	str	r3, [r7, #16]
 8001402:	4b26      	ldr	r3, [pc, #152]	; (800149c <MX_GPIO_Init+0xb4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a25      	ldr	r2, [pc, #148]	; (800149c <MX_GPIO_Init+0xb4>)
 8001408:	f043 0304 	orr.w	r3, r3, #4
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b23      	ldr	r3, [pc, #140]	; (800149c <MX_GPIO_Init+0xb4>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0304 	and.w	r3, r3, #4
 8001416:	613b      	str	r3, [r7, #16]
 8001418:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800141a:	2300      	movs	r3, #0
 800141c:	60fb      	str	r3, [r7, #12]
 800141e:	4b1f      	ldr	r3, [pc, #124]	; (800149c <MX_GPIO_Init+0xb4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	4a1e      	ldr	r2, [pc, #120]	; (800149c <MX_GPIO_Init+0xb4>)
 8001424:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001428:	6313      	str	r3, [r2, #48]	; 0x30
 800142a:	4b1c      	ldr	r3, [pc, #112]	; (800149c <MX_GPIO_Init+0xb4>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001432:	60fb      	str	r3, [r7, #12]
 8001434:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001436:	2300      	movs	r3, #0
 8001438:	60bb      	str	r3, [r7, #8]
 800143a:	4b18      	ldr	r3, [pc, #96]	; (800149c <MX_GPIO_Init+0xb4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143e:	4a17      	ldr	r2, [pc, #92]	; (800149c <MX_GPIO_Init+0xb4>)
 8001440:	f043 0302 	orr.w	r3, r3, #2
 8001444:	6313      	str	r3, [r2, #48]	; 0x30
 8001446:	4b15      	ldr	r3, [pc, #84]	; (800149c <MX_GPIO_Init+0xb4>)
 8001448:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144a:	f003 0302 	and.w	r3, r3, #2
 800144e:	60bb      	str	r3, [r7, #8]
 8001450:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001452:	2300      	movs	r3, #0
 8001454:	607b      	str	r3, [r7, #4]
 8001456:	4b11      	ldr	r3, [pc, #68]	; (800149c <MX_GPIO_Init+0xb4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a10      	ldr	r2, [pc, #64]	; (800149c <MX_GPIO_Init+0xb4>)
 800145c:	f043 0301 	orr.w	r3, r3, #1
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b0e      	ldr	r3, [pc, #56]	; (800149c <MX_GPIO_Init+0xb4>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0301 	and.w	r3, r3, #1
 800146a:	607b      	str	r3, [r7, #4]
 800146c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED1_Pin|LED0_Pin, GPIO_PIN_SET);
 800146e:	2201      	movs	r2, #1
 8001470:	2103      	movs	r1, #3
 8001472:	480b      	ldr	r0, [pc, #44]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001474:	f7ff fb5e 	bl	8000b34 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED1_Pin|LED0_Pin;
 8001478:	2303      	movs	r3, #3
 800147a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800147c:	2301      	movs	r3, #1
 800147e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001484:	2303      	movs	r3, #3
 8001486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001488:	f107 0314 	add.w	r3, r7, #20
 800148c:	4619      	mov	r1, r3
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <MX_GPIO_Init+0xb8>)
 8001490:	f7ff f9a6 	bl	80007e0 <HAL_GPIO_Init>

}
 8001494:	bf00      	nop
 8001496:	3728      	adds	r7, #40	; 0x28
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	40023800 	.word	0x40023800
 80014a0:	40020400 	.word	0x40020400

080014a4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014ac:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014b0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80014b4:	f003 0301 	and.w	r3, r3, #1
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d013      	beq.n	80014e4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80014bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014c0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80014c4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d00b      	beq.n	80014e4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80014cc:	e000      	b.n	80014d0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80014ce:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80014d0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f9      	beq.n	80014ce <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80014da:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80014de:	687a      	ldr	r2, [r7, #4]
 80014e0:	b2d2      	uxtb	r2, r2
 80014e2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80014e4:	687b      	ldr	r3, [r7, #4]
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	370c      	adds	r7, #12
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
	...

080014f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80014fa:	f7fe fff7 	bl	80004ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80014fe:	f000 f81b 	bl	8001538 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001502:	f7ff ff71 	bl	80013e8 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Start\r\n");
 8001506:	480a      	ldr	r0, [pc, #40]	; (8001530 <main+0x3c>)
 8001508:	f000 fa6c 	bl	80019e4 <puts>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  uint32_t i = 3;
 800150c:	2303      	movs	r3, #3
 800150e:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 8001510:	2102      	movs	r1, #2
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <main+0x40>)
 8001514:	f7ff fb27 	bl	8000b66 <HAL_GPIO_TogglePin>
	HAL_Delay(10);
 8001518:	200a      	movs	r0, #10
 800151a:	f7ff f859 	bl	80005d0 <HAL_Delay>
	HAL_GPIO_TogglePin(LED1_GPIO_Port, LED1_Pin);
 800151e:	2101      	movs	r1, #1
 8001520:	4804      	ldr	r0, [pc, #16]	; (8001534 <main+0x40>)
 8001522:	f7ff fb20 	bl	8000b66 <HAL_GPIO_TogglePin>
	HAL_Delay(20);
 8001526:	2014      	movs	r0, #20
 8001528:	f7ff f852 	bl	80005d0 <HAL_Delay>
	HAL_GPIO_TogglePin(LED0_GPIO_Port, LED0_Pin);
 800152c:	e7f0      	b.n	8001510 <main+0x1c>
 800152e:	bf00      	nop
 8001530:	08002214 	.word	0x08002214
 8001534:	40020400 	.word	0x40020400

08001538 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b094      	sub	sp, #80	; 0x50
 800153c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800153e:	f107 0320 	add.w	r3, r7, #32
 8001542:	2230      	movs	r2, #48	; 0x30
 8001544:	2100      	movs	r1, #0
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f9e8 	bl	800191c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800154c:	f107 030c 	add.w	r3, r7, #12
 8001550:	2200      	movs	r2, #0
 8001552:	601a      	str	r2, [r3, #0]
 8001554:	605a      	str	r2, [r3, #4]
 8001556:	609a      	str	r2, [r3, #8]
 8001558:	60da      	str	r2, [r3, #12]
 800155a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800155c:	2300      	movs	r3, #0
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <SystemClock_Config+0xd8>)
 8001562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001564:	4a2a      	ldr	r2, [pc, #168]	; (8001610 <SystemClock_Config+0xd8>)
 8001566:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800156a:	6413      	str	r3, [r2, #64]	; 0x40
 800156c:	4b28      	ldr	r3, [pc, #160]	; (8001610 <SystemClock_Config+0xd8>)
 800156e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001570:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001578:	2300      	movs	r3, #0
 800157a:	607b      	str	r3, [r7, #4]
 800157c:	4b25      	ldr	r3, [pc, #148]	; (8001614 <SystemClock_Config+0xdc>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a24      	ldr	r2, [pc, #144]	; (8001614 <SystemClock_Config+0xdc>)
 8001582:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001586:	6013      	str	r3, [r2, #0]
 8001588:	4b22      	ldr	r3, [pc, #136]	; (8001614 <SystemClock_Config+0xdc>)
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001590:	607b      	str	r3, [r7, #4]
 8001592:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001594:	2301      	movs	r3, #1
 8001596:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001598:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800159c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800159e:	2302      	movs	r3, #2
 80015a0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015a2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80015a8:	230f      	movs	r3, #15
 80015aa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015ac:	23d8      	movs	r3, #216	; 0xd8
 80015ae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015b0:	2302      	movs	r3, #2
 80015b2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80015b4:	2304      	movs	r3, #4
 80015b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80015b8:	f107 0320 	add.w	r3, r7, #32
 80015bc:	4618      	mov	r0, r3
 80015be:	f7ff fb3d 	bl	8000c3c <HAL_RCC_OscConfig>
 80015c2:	4603      	mov	r3, r0
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d001      	beq.n	80015cc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80015c8:	f000 f842 	bl	8001650 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80015cc:	f7ff fae6 	bl	8000b9c <HAL_PWREx_EnableOverDrive>
 80015d0:	4603      	mov	r3, r0
 80015d2:	2b00      	cmp	r3, #0
 80015d4:	d001      	beq.n	80015da <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80015d6:	f000 f83b 	bl	8001650 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80015da:	230f      	movs	r3, #15
 80015dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80015de:	2302      	movs	r3, #2
 80015e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80015e6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80015ec:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80015f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80015f2:	f107 030c 	add.w	r3, r7, #12
 80015f6:	2105      	movs	r1, #5
 80015f8:	4618      	mov	r0, r3
 80015fa:	f7ff fd61 	bl	80010c0 <HAL_RCC_ClockConfig>
 80015fe:	4603      	mov	r3, r0
 8001600:	2b00      	cmp	r3, #0
 8001602:	d001      	beq.n	8001608 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001604:	f000 f824 	bl	8001650 <Error_Handler>
  }
}
 8001608:	bf00      	nop
 800160a:	3750      	adds	r7, #80	; 0x50
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	40023800 	.word	0x40023800
 8001614:	40007000 	.word	0x40007000

08001618 <_write>:

/* USER CODE BEGIN 4 */


int _write(int file, char *ptr, int len) {
 8001618:	b580      	push	{r7, lr}
 800161a:	b086      	sub	sp, #24
 800161c:	af00      	add	r7, sp, #0
 800161e:	60f8      	str	r0, [r7, #12]
 8001620:	60b9      	str	r1, [r7, #8]
 8001622:	607a      	str	r2, [r7, #4]
	int DataIdx;
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	e009      	b.n	800163e <_write+0x26>
		ITM_SendChar(*ptr++);
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	1c5a      	adds	r2, r3, #1
 800162e:	60ba      	str	r2, [r7, #8]
 8001630:	781b      	ldrb	r3, [r3, #0]
 8001632:	4618      	mov	r0, r3
 8001634:	f7ff ff36 	bl	80014a4 <ITM_SendChar>
	for (DataIdx = 0; DataIdx < len; DataIdx++) {
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	3301      	adds	r3, #1
 800163c:	617b      	str	r3, [r7, #20]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	429a      	cmp	r2, r3
 8001644:	dbf1      	blt.n	800162a <_write+0x12>
	}
	return len;
 8001646:	687b      	ldr	r3, [r7, #4]
}
 8001648:	4618      	mov	r0, r3
 800164a:	3718      	adds	r7, #24
 800164c:	46bd      	mov	sp, r7
 800164e:	bd80      	pop	{r7, pc}

08001650 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001650:	b480      	push	{r7}
 8001652:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001654:	bf00      	nop
 8001656:	46bd      	mov	sp, r7
 8001658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800165c:	4770      	bx	lr
	...

08001660 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	b083      	sub	sp, #12
 8001664:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	607b      	str	r3, [r7, #4]
 800166a:	4b10      	ldr	r3, [pc, #64]	; (80016ac <HAL_MspInit+0x4c>)
 800166c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166e:	4a0f      	ldr	r2, [pc, #60]	; (80016ac <HAL_MspInit+0x4c>)
 8001670:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001674:	6453      	str	r3, [r2, #68]	; 0x44
 8001676:	4b0d      	ldr	r3, [pc, #52]	; (80016ac <HAL_MspInit+0x4c>)
 8001678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800167a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	603b      	str	r3, [r7, #0]
 8001686:	4b09      	ldr	r3, [pc, #36]	; (80016ac <HAL_MspInit+0x4c>)
 8001688:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800168a:	4a08      	ldr	r2, [pc, #32]	; (80016ac <HAL_MspInit+0x4c>)
 800168c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001690:	6413      	str	r3, [r2, #64]	; 0x40
 8001692:	4b06      	ldr	r3, [pc, #24]	; (80016ac <HAL_MspInit+0x4c>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169a:	603b      	str	r3, [r7, #0]
 800169c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	bf00      	nop
 80016ac:	40023800 	.word	0x40023800

080016b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr

080016be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016be:	b480      	push	{r7}
 80016c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c2:	e7fe      	b.n	80016c2 <HardFault_Handler+0x4>

080016c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c4:	b480      	push	{r7}
 80016c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016c8:	e7fe      	b.n	80016c8 <MemManage_Handler+0x4>

080016ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ca:	b480      	push	{r7}
 80016cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <BusFault_Handler+0x4>

080016d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d0:	b480      	push	{r7}
 80016d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d4:	e7fe      	b.n	80016d4 <UsageFault_Handler+0x4>

080016d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016d6:	b480      	push	{r7}
 80016d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016da:	bf00      	nop
 80016dc:	46bd      	mov	sp, r7
 80016de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e2:	4770      	bx	lr

080016e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016e8:	bf00      	nop
 80016ea:	46bd      	mov	sp, r7
 80016ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f0:	4770      	bx	lr

080016f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80016f2:	b480      	push	{r7}
 80016f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80016f6:	bf00      	nop
 80016f8:	46bd      	mov	sp, r7
 80016fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fe:	4770      	bx	lr

08001700 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001704:	f7fe ff44 	bl	8000590 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}

0800170c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
 8001712:	60f8      	str	r0, [r7, #12]
 8001714:	60b9      	str	r1, [r7, #8]
 8001716:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001718:	2300      	movs	r3, #0
 800171a:	617b      	str	r3, [r7, #20]
 800171c:	e00a      	b.n	8001734 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800171e:	f3af 8000 	nop.w
 8001722:	4601      	mov	r1, r0
 8001724:	68bb      	ldr	r3, [r7, #8]
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	60ba      	str	r2, [r7, #8]
 800172a:	b2ca      	uxtb	r2, r1
 800172c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3301      	adds	r3, #1
 8001732:	617b      	str	r3, [r7, #20]
 8001734:	697a      	ldr	r2, [r7, #20]
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	429a      	cmp	r2, r3
 800173a:	dbf0      	blt.n	800171e <_read+0x12>
	}

return len;
 800173c:	687b      	ldr	r3, [r7, #4]
}
 800173e:	4618      	mov	r0, r3
 8001740:	3718      	adds	r7, #24
 8001742:	46bd      	mov	sp, r7
 8001744:	bd80      	pop	{r7, pc}

08001746 <_close>:
	}
	return len;
}

int _close(int file)
{
 8001746:	b480      	push	{r7}
 8001748:	b083      	sub	sp, #12
 800174a:	af00      	add	r7, sp, #0
 800174c:	6078      	str	r0, [r7, #4]
	return -1;
 800174e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001752:	4618      	mov	r0, r3
 8001754:	370c      	adds	r7, #12
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr

0800175e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800175e:	b480      	push	{r7}
 8001760:	b083      	sub	sp, #12
 8001762:	af00      	add	r7, sp, #0
 8001764:	6078      	str	r0, [r7, #4]
 8001766:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800176e:	605a      	str	r2, [r3, #4]
	return 0;
 8001770:	2300      	movs	r3, #0
}
 8001772:	4618      	mov	r0, r3
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr

0800177e <_isatty>:

int _isatty(int file)
{
 800177e:	b480      	push	{r7}
 8001780:	b083      	sub	sp, #12
 8001782:	af00      	add	r7, sp, #0
 8001784:	6078      	str	r0, [r7, #4]
	return 1;
 8001786:	2301      	movs	r3, #1
}
 8001788:	4618      	mov	r0, r3
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr

08001794 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001794:	b480      	push	{r7}
 8001796:	b085      	sub	sp, #20
 8001798:	af00      	add	r7, sp, #0
 800179a:	60f8      	str	r0, [r7, #12]
 800179c:	60b9      	str	r1, [r7, #8]
 800179e:	607a      	str	r2, [r7, #4]
	return 0;
 80017a0:	2300      	movs	r3, #0
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3714      	adds	r7, #20
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
	...

080017b0 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b084      	sub	sp, #16
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80017b8:	4b11      	ldr	r3, [pc, #68]	; (8001800 <_sbrk+0x50>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d102      	bne.n	80017c6 <_sbrk+0x16>
		heap_end = &end;
 80017c0:	4b0f      	ldr	r3, [pc, #60]	; (8001800 <_sbrk+0x50>)
 80017c2:	4a10      	ldr	r2, [pc, #64]	; (8001804 <_sbrk+0x54>)
 80017c4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 80017c6:	4b0e      	ldr	r3, [pc, #56]	; (8001800 <_sbrk+0x50>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 80017cc:	4b0c      	ldr	r3, [pc, #48]	; (8001800 <_sbrk+0x50>)
 80017ce:	681a      	ldr	r2, [r3, #0]
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4413      	add	r3, r2
 80017d4:	466a      	mov	r2, sp
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d907      	bls.n	80017ea <_sbrk+0x3a>
	{
		errno = ENOMEM;
 80017da:	f000 f875 	bl	80018c8 <__errno>
 80017de:	4602      	mov	r2, r0
 80017e0:	230c      	movs	r3, #12
 80017e2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 80017e4:	f04f 33ff 	mov.w	r3, #4294967295
 80017e8:	e006      	b.n	80017f8 <_sbrk+0x48>
	}

	heap_end += incr;
 80017ea:	4b05      	ldr	r3, [pc, #20]	; (8001800 <_sbrk+0x50>)
 80017ec:	681a      	ldr	r2, [r3, #0]
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	4413      	add	r3, r2
 80017f2:	4a03      	ldr	r2, [pc, #12]	; (8001800 <_sbrk+0x50>)
 80017f4:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 80017f6:	68fb      	ldr	r3, [r7, #12]
}
 80017f8:	4618      	mov	r0, r3
 80017fa:	3710      	adds	r7, #16
 80017fc:	46bd      	mov	sp, r7
 80017fe:	bd80      	pop	{r7, pc}
 8001800:	2000008c 	.word	0x2000008c
 8001804:	200000a0 	.word	0x200000a0

08001808 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800180c:	4b16      	ldr	r3, [pc, #88]	; (8001868 <SystemInit+0x60>)
 800180e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001812:	4a15      	ldr	r2, [pc, #84]	; (8001868 <SystemInit+0x60>)
 8001814:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001818:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 800181c:	4b13      	ldr	r3, [pc, #76]	; (800186c <SystemInit+0x64>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a12      	ldr	r2, [pc, #72]	; (800186c <SystemInit+0x64>)
 8001822:	f043 0301 	orr.w	r3, r3, #1
 8001826:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8001828:	4b10      	ldr	r3, [pc, #64]	; (800186c <SystemInit+0x64>)
 800182a:	2200      	movs	r2, #0
 800182c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 800182e:	4b0f      	ldr	r3, [pc, #60]	; (800186c <SystemInit+0x64>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a0e      	ldr	r2, [pc, #56]	; (800186c <SystemInit+0x64>)
 8001834:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001838:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800183c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800183e:	4b0b      	ldr	r3, [pc, #44]	; (800186c <SystemInit+0x64>)
 8001840:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <SystemInit+0x68>)
 8001842:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <SystemInit+0x64>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4a08      	ldr	r2, [pc, #32]	; (800186c <SystemInit+0x64>)
 800184a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800184e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8001850:	4b06      	ldr	r3, [pc, #24]	; (800186c <SystemInit+0x64>)
 8001852:	2200      	movs	r2, #0
 8001854:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001856:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SystemInit+0x60>)
 8001858:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185c:	609a      	str	r2, [r3, #8]
#endif
}
 800185e:	bf00      	nop
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00
 800186c:	40023800 	.word	0x40023800
 8001870:	24003010 	.word	0x24003010

08001874 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001874:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ac <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001878:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800187a:	e003      	b.n	8001884 <LoopCopyDataInit>

0800187c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800187c:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800187e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001880:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8001882:	3104      	adds	r1, #4

08001884 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8001884:	480b      	ldr	r0, [pc, #44]	; (80018b4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8001886:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001888:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800188a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800188c:	d3f6      	bcc.n	800187c <CopyDataInit>
  ldr  r2, =_sbss
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001890:	e002      	b.n	8001898 <LoopFillZerobss>

08001892 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8001892:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8001894:	f842 3b04 	str.w	r3, [r2], #4

08001898 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001898:	4b09      	ldr	r3, [pc, #36]	; (80018c0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800189a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800189c:	d3f9      	bcc.n	8001892 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800189e:	f7ff ffb3 	bl	8001808 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018a2:	f000 f817 	bl	80018d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018a6:	f7ff fe25 	bl	80014f4 <main>
  bx  lr    
 80018aa:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80018ac:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80018b0:	080022a0 	.word	0x080022a0
  ldr  r0, =_sdata
 80018b4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018b8:	20000070 	.word	0x20000070
  ldr  r2, =_sbss
 80018bc:	20000070 	.word	0x20000070
  ldr  r3, = _ebss
 80018c0:	200000a0 	.word	0x200000a0

080018c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018c4:	e7fe      	b.n	80018c4 <ADC_IRQHandler>
	...

080018c8 <__errno>:
 80018c8:	4b01      	ldr	r3, [pc, #4]	; (80018d0 <__errno+0x8>)
 80018ca:	6818      	ldr	r0, [r3, #0]
 80018cc:	4770      	bx	lr
 80018ce:	bf00      	nop
 80018d0:	2000000c 	.word	0x2000000c

080018d4 <__libc_init_array>:
 80018d4:	b570      	push	{r4, r5, r6, lr}
 80018d6:	4e0d      	ldr	r6, [pc, #52]	; (800190c <__libc_init_array+0x38>)
 80018d8:	4c0d      	ldr	r4, [pc, #52]	; (8001910 <__libc_init_array+0x3c>)
 80018da:	1ba4      	subs	r4, r4, r6
 80018dc:	10a4      	asrs	r4, r4, #2
 80018de:	2500      	movs	r5, #0
 80018e0:	42a5      	cmp	r5, r4
 80018e2:	d109      	bne.n	80018f8 <__libc_init_array+0x24>
 80018e4:	4e0b      	ldr	r6, [pc, #44]	; (8001914 <__libc_init_array+0x40>)
 80018e6:	4c0c      	ldr	r4, [pc, #48]	; (8001918 <__libc_init_array+0x44>)
 80018e8:	f000 fc88 	bl	80021fc <_init>
 80018ec:	1ba4      	subs	r4, r4, r6
 80018ee:	10a4      	asrs	r4, r4, #2
 80018f0:	2500      	movs	r5, #0
 80018f2:	42a5      	cmp	r5, r4
 80018f4:	d105      	bne.n	8001902 <__libc_init_array+0x2e>
 80018f6:	bd70      	pop	{r4, r5, r6, pc}
 80018f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80018fc:	4798      	blx	r3
 80018fe:	3501      	adds	r5, #1
 8001900:	e7ee      	b.n	80018e0 <__libc_init_array+0xc>
 8001902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001906:	4798      	blx	r3
 8001908:	3501      	adds	r5, #1
 800190a:	e7f2      	b.n	80018f2 <__libc_init_array+0x1e>
 800190c:	08002298 	.word	0x08002298
 8001910:	08002298 	.word	0x08002298
 8001914:	08002298 	.word	0x08002298
 8001918:	0800229c 	.word	0x0800229c

0800191c <memset>:
 800191c:	4402      	add	r2, r0
 800191e:	4603      	mov	r3, r0
 8001920:	4293      	cmp	r3, r2
 8001922:	d100      	bne.n	8001926 <memset+0xa>
 8001924:	4770      	bx	lr
 8001926:	f803 1b01 	strb.w	r1, [r3], #1
 800192a:	e7f9      	b.n	8001920 <memset+0x4>

0800192c <_puts_r>:
 800192c:	b570      	push	{r4, r5, r6, lr}
 800192e:	460e      	mov	r6, r1
 8001930:	4605      	mov	r5, r0
 8001932:	b118      	cbz	r0, 800193c <_puts_r+0x10>
 8001934:	6983      	ldr	r3, [r0, #24]
 8001936:	b90b      	cbnz	r3, 800193c <_puts_r+0x10>
 8001938:	f000 fa0c 	bl	8001d54 <__sinit>
 800193c:	69ab      	ldr	r3, [r5, #24]
 800193e:	68ac      	ldr	r4, [r5, #8]
 8001940:	b913      	cbnz	r3, 8001948 <_puts_r+0x1c>
 8001942:	4628      	mov	r0, r5
 8001944:	f000 fa06 	bl	8001d54 <__sinit>
 8001948:	4b23      	ldr	r3, [pc, #140]	; (80019d8 <_puts_r+0xac>)
 800194a:	429c      	cmp	r4, r3
 800194c:	d117      	bne.n	800197e <_puts_r+0x52>
 800194e:	686c      	ldr	r4, [r5, #4]
 8001950:	89a3      	ldrh	r3, [r4, #12]
 8001952:	071b      	lsls	r3, r3, #28
 8001954:	d51d      	bpl.n	8001992 <_puts_r+0x66>
 8001956:	6923      	ldr	r3, [r4, #16]
 8001958:	b1db      	cbz	r3, 8001992 <_puts_r+0x66>
 800195a:	3e01      	subs	r6, #1
 800195c:	68a3      	ldr	r3, [r4, #8]
 800195e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8001962:	3b01      	subs	r3, #1
 8001964:	60a3      	str	r3, [r4, #8]
 8001966:	b9e9      	cbnz	r1, 80019a4 <_puts_r+0x78>
 8001968:	2b00      	cmp	r3, #0
 800196a:	da2e      	bge.n	80019ca <_puts_r+0x9e>
 800196c:	4622      	mov	r2, r4
 800196e:	210a      	movs	r1, #10
 8001970:	4628      	mov	r0, r5
 8001972:	f000 f83f 	bl	80019f4 <__swbuf_r>
 8001976:	3001      	adds	r0, #1
 8001978:	d011      	beq.n	800199e <_puts_r+0x72>
 800197a:	200a      	movs	r0, #10
 800197c:	e011      	b.n	80019a2 <_puts_r+0x76>
 800197e:	4b17      	ldr	r3, [pc, #92]	; (80019dc <_puts_r+0xb0>)
 8001980:	429c      	cmp	r4, r3
 8001982:	d101      	bne.n	8001988 <_puts_r+0x5c>
 8001984:	68ac      	ldr	r4, [r5, #8]
 8001986:	e7e3      	b.n	8001950 <_puts_r+0x24>
 8001988:	4b15      	ldr	r3, [pc, #84]	; (80019e0 <_puts_r+0xb4>)
 800198a:	429c      	cmp	r4, r3
 800198c:	bf08      	it	eq
 800198e:	68ec      	ldreq	r4, [r5, #12]
 8001990:	e7de      	b.n	8001950 <_puts_r+0x24>
 8001992:	4621      	mov	r1, r4
 8001994:	4628      	mov	r0, r5
 8001996:	f000 f87f 	bl	8001a98 <__swsetup_r>
 800199a:	2800      	cmp	r0, #0
 800199c:	d0dd      	beq.n	800195a <_puts_r+0x2e>
 800199e:	f04f 30ff 	mov.w	r0, #4294967295
 80019a2:	bd70      	pop	{r4, r5, r6, pc}
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	da04      	bge.n	80019b2 <_puts_r+0x86>
 80019a8:	69a2      	ldr	r2, [r4, #24]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	dc06      	bgt.n	80019bc <_puts_r+0x90>
 80019ae:	290a      	cmp	r1, #10
 80019b0:	d004      	beq.n	80019bc <_puts_r+0x90>
 80019b2:	6823      	ldr	r3, [r4, #0]
 80019b4:	1c5a      	adds	r2, r3, #1
 80019b6:	6022      	str	r2, [r4, #0]
 80019b8:	7019      	strb	r1, [r3, #0]
 80019ba:	e7cf      	b.n	800195c <_puts_r+0x30>
 80019bc:	4622      	mov	r2, r4
 80019be:	4628      	mov	r0, r5
 80019c0:	f000 f818 	bl	80019f4 <__swbuf_r>
 80019c4:	3001      	adds	r0, #1
 80019c6:	d1c9      	bne.n	800195c <_puts_r+0x30>
 80019c8:	e7e9      	b.n	800199e <_puts_r+0x72>
 80019ca:	6823      	ldr	r3, [r4, #0]
 80019cc:	200a      	movs	r0, #10
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	6022      	str	r2, [r4, #0]
 80019d2:	7018      	strb	r0, [r3, #0]
 80019d4:	e7e5      	b.n	80019a2 <_puts_r+0x76>
 80019d6:	bf00      	nop
 80019d8:	08002250 	.word	0x08002250
 80019dc:	08002270 	.word	0x08002270
 80019e0:	08002230 	.word	0x08002230

080019e4 <puts>:
 80019e4:	4b02      	ldr	r3, [pc, #8]	; (80019f0 <puts+0xc>)
 80019e6:	4601      	mov	r1, r0
 80019e8:	6818      	ldr	r0, [r3, #0]
 80019ea:	f7ff bf9f 	b.w	800192c <_puts_r>
 80019ee:	bf00      	nop
 80019f0:	2000000c 	.word	0x2000000c

080019f4 <__swbuf_r>:
 80019f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80019f6:	460e      	mov	r6, r1
 80019f8:	4614      	mov	r4, r2
 80019fa:	4605      	mov	r5, r0
 80019fc:	b118      	cbz	r0, 8001a06 <__swbuf_r+0x12>
 80019fe:	6983      	ldr	r3, [r0, #24]
 8001a00:	b90b      	cbnz	r3, 8001a06 <__swbuf_r+0x12>
 8001a02:	f000 f9a7 	bl	8001d54 <__sinit>
 8001a06:	4b21      	ldr	r3, [pc, #132]	; (8001a8c <__swbuf_r+0x98>)
 8001a08:	429c      	cmp	r4, r3
 8001a0a:	d12a      	bne.n	8001a62 <__swbuf_r+0x6e>
 8001a0c:	686c      	ldr	r4, [r5, #4]
 8001a0e:	69a3      	ldr	r3, [r4, #24]
 8001a10:	60a3      	str	r3, [r4, #8]
 8001a12:	89a3      	ldrh	r3, [r4, #12]
 8001a14:	071a      	lsls	r2, r3, #28
 8001a16:	d52e      	bpl.n	8001a76 <__swbuf_r+0x82>
 8001a18:	6923      	ldr	r3, [r4, #16]
 8001a1a:	b363      	cbz	r3, 8001a76 <__swbuf_r+0x82>
 8001a1c:	6923      	ldr	r3, [r4, #16]
 8001a1e:	6820      	ldr	r0, [r4, #0]
 8001a20:	1ac0      	subs	r0, r0, r3
 8001a22:	6963      	ldr	r3, [r4, #20]
 8001a24:	b2f6      	uxtb	r6, r6
 8001a26:	4283      	cmp	r3, r0
 8001a28:	4637      	mov	r7, r6
 8001a2a:	dc04      	bgt.n	8001a36 <__swbuf_r+0x42>
 8001a2c:	4621      	mov	r1, r4
 8001a2e:	4628      	mov	r0, r5
 8001a30:	f000 f926 	bl	8001c80 <_fflush_r>
 8001a34:	bb28      	cbnz	r0, 8001a82 <__swbuf_r+0x8e>
 8001a36:	68a3      	ldr	r3, [r4, #8]
 8001a38:	3b01      	subs	r3, #1
 8001a3a:	60a3      	str	r3, [r4, #8]
 8001a3c:	6823      	ldr	r3, [r4, #0]
 8001a3e:	1c5a      	adds	r2, r3, #1
 8001a40:	6022      	str	r2, [r4, #0]
 8001a42:	701e      	strb	r6, [r3, #0]
 8001a44:	6963      	ldr	r3, [r4, #20]
 8001a46:	3001      	adds	r0, #1
 8001a48:	4283      	cmp	r3, r0
 8001a4a:	d004      	beq.n	8001a56 <__swbuf_r+0x62>
 8001a4c:	89a3      	ldrh	r3, [r4, #12]
 8001a4e:	07db      	lsls	r3, r3, #31
 8001a50:	d519      	bpl.n	8001a86 <__swbuf_r+0x92>
 8001a52:	2e0a      	cmp	r6, #10
 8001a54:	d117      	bne.n	8001a86 <__swbuf_r+0x92>
 8001a56:	4621      	mov	r1, r4
 8001a58:	4628      	mov	r0, r5
 8001a5a:	f000 f911 	bl	8001c80 <_fflush_r>
 8001a5e:	b190      	cbz	r0, 8001a86 <__swbuf_r+0x92>
 8001a60:	e00f      	b.n	8001a82 <__swbuf_r+0x8e>
 8001a62:	4b0b      	ldr	r3, [pc, #44]	; (8001a90 <__swbuf_r+0x9c>)
 8001a64:	429c      	cmp	r4, r3
 8001a66:	d101      	bne.n	8001a6c <__swbuf_r+0x78>
 8001a68:	68ac      	ldr	r4, [r5, #8]
 8001a6a:	e7d0      	b.n	8001a0e <__swbuf_r+0x1a>
 8001a6c:	4b09      	ldr	r3, [pc, #36]	; (8001a94 <__swbuf_r+0xa0>)
 8001a6e:	429c      	cmp	r4, r3
 8001a70:	bf08      	it	eq
 8001a72:	68ec      	ldreq	r4, [r5, #12]
 8001a74:	e7cb      	b.n	8001a0e <__swbuf_r+0x1a>
 8001a76:	4621      	mov	r1, r4
 8001a78:	4628      	mov	r0, r5
 8001a7a:	f000 f80d 	bl	8001a98 <__swsetup_r>
 8001a7e:	2800      	cmp	r0, #0
 8001a80:	d0cc      	beq.n	8001a1c <__swbuf_r+0x28>
 8001a82:	f04f 37ff 	mov.w	r7, #4294967295
 8001a86:	4638      	mov	r0, r7
 8001a88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	08002250 	.word	0x08002250
 8001a90:	08002270 	.word	0x08002270
 8001a94:	08002230 	.word	0x08002230

08001a98 <__swsetup_r>:
 8001a98:	4b32      	ldr	r3, [pc, #200]	; (8001b64 <__swsetup_r+0xcc>)
 8001a9a:	b570      	push	{r4, r5, r6, lr}
 8001a9c:	681d      	ldr	r5, [r3, #0]
 8001a9e:	4606      	mov	r6, r0
 8001aa0:	460c      	mov	r4, r1
 8001aa2:	b125      	cbz	r5, 8001aae <__swsetup_r+0x16>
 8001aa4:	69ab      	ldr	r3, [r5, #24]
 8001aa6:	b913      	cbnz	r3, 8001aae <__swsetup_r+0x16>
 8001aa8:	4628      	mov	r0, r5
 8001aaa:	f000 f953 	bl	8001d54 <__sinit>
 8001aae:	4b2e      	ldr	r3, [pc, #184]	; (8001b68 <__swsetup_r+0xd0>)
 8001ab0:	429c      	cmp	r4, r3
 8001ab2:	d10f      	bne.n	8001ad4 <__swsetup_r+0x3c>
 8001ab4:	686c      	ldr	r4, [r5, #4]
 8001ab6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	0715      	lsls	r5, r2, #28
 8001abe:	d42c      	bmi.n	8001b1a <__swsetup_r+0x82>
 8001ac0:	06d0      	lsls	r0, r2, #27
 8001ac2:	d411      	bmi.n	8001ae8 <__swsetup_r+0x50>
 8001ac4:	2209      	movs	r2, #9
 8001ac6:	6032      	str	r2, [r6, #0]
 8001ac8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001acc:	81a3      	strh	r3, [r4, #12]
 8001ace:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad2:	e03e      	b.n	8001b52 <__swsetup_r+0xba>
 8001ad4:	4b25      	ldr	r3, [pc, #148]	; (8001b6c <__swsetup_r+0xd4>)
 8001ad6:	429c      	cmp	r4, r3
 8001ad8:	d101      	bne.n	8001ade <__swsetup_r+0x46>
 8001ada:	68ac      	ldr	r4, [r5, #8]
 8001adc:	e7eb      	b.n	8001ab6 <__swsetup_r+0x1e>
 8001ade:	4b24      	ldr	r3, [pc, #144]	; (8001b70 <__swsetup_r+0xd8>)
 8001ae0:	429c      	cmp	r4, r3
 8001ae2:	bf08      	it	eq
 8001ae4:	68ec      	ldreq	r4, [r5, #12]
 8001ae6:	e7e6      	b.n	8001ab6 <__swsetup_r+0x1e>
 8001ae8:	0751      	lsls	r1, r2, #29
 8001aea:	d512      	bpl.n	8001b12 <__swsetup_r+0x7a>
 8001aec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001aee:	b141      	cbz	r1, 8001b02 <__swsetup_r+0x6a>
 8001af0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001af4:	4299      	cmp	r1, r3
 8001af6:	d002      	beq.n	8001afe <__swsetup_r+0x66>
 8001af8:	4630      	mov	r0, r6
 8001afa:	f000 fa19 	bl	8001f30 <_free_r>
 8001afe:	2300      	movs	r3, #0
 8001b00:	6363      	str	r3, [r4, #52]	; 0x34
 8001b02:	89a3      	ldrh	r3, [r4, #12]
 8001b04:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8001b08:	81a3      	strh	r3, [r4, #12]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	6063      	str	r3, [r4, #4]
 8001b0e:	6923      	ldr	r3, [r4, #16]
 8001b10:	6023      	str	r3, [r4, #0]
 8001b12:	89a3      	ldrh	r3, [r4, #12]
 8001b14:	f043 0308 	orr.w	r3, r3, #8
 8001b18:	81a3      	strh	r3, [r4, #12]
 8001b1a:	6923      	ldr	r3, [r4, #16]
 8001b1c:	b94b      	cbnz	r3, 8001b32 <__swsetup_r+0x9a>
 8001b1e:	89a3      	ldrh	r3, [r4, #12]
 8001b20:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001b24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b28:	d003      	beq.n	8001b32 <__swsetup_r+0x9a>
 8001b2a:	4621      	mov	r1, r4
 8001b2c:	4630      	mov	r0, r6
 8001b2e:	f000 f9bf 	bl	8001eb0 <__smakebuf_r>
 8001b32:	89a2      	ldrh	r2, [r4, #12]
 8001b34:	f012 0301 	ands.w	r3, r2, #1
 8001b38:	d00c      	beq.n	8001b54 <__swsetup_r+0xbc>
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	60a3      	str	r3, [r4, #8]
 8001b3e:	6963      	ldr	r3, [r4, #20]
 8001b40:	425b      	negs	r3, r3
 8001b42:	61a3      	str	r3, [r4, #24]
 8001b44:	6923      	ldr	r3, [r4, #16]
 8001b46:	b953      	cbnz	r3, 8001b5e <__swsetup_r+0xc6>
 8001b48:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001b4c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8001b50:	d1ba      	bne.n	8001ac8 <__swsetup_r+0x30>
 8001b52:	bd70      	pop	{r4, r5, r6, pc}
 8001b54:	0792      	lsls	r2, r2, #30
 8001b56:	bf58      	it	pl
 8001b58:	6963      	ldrpl	r3, [r4, #20]
 8001b5a:	60a3      	str	r3, [r4, #8]
 8001b5c:	e7f2      	b.n	8001b44 <__swsetup_r+0xac>
 8001b5e:	2000      	movs	r0, #0
 8001b60:	e7f7      	b.n	8001b52 <__swsetup_r+0xba>
 8001b62:	bf00      	nop
 8001b64:	2000000c 	.word	0x2000000c
 8001b68:	08002250 	.word	0x08002250
 8001b6c:	08002270 	.word	0x08002270
 8001b70:	08002230 	.word	0x08002230

08001b74 <__sflush_r>:
 8001b74:	898a      	ldrh	r2, [r1, #12]
 8001b76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001b7a:	4605      	mov	r5, r0
 8001b7c:	0710      	lsls	r0, r2, #28
 8001b7e:	460c      	mov	r4, r1
 8001b80:	d458      	bmi.n	8001c34 <__sflush_r+0xc0>
 8001b82:	684b      	ldr	r3, [r1, #4]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	dc05      	bgt.n	8001b94 <__sflush_r+0x20>
 8001b88:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	dc02      	bgt.n	8001b94 <__sflush_r+0x20>
 8001b8e:	2000      	movs	r0, #0
 8001b90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001b96:	2e00      	cmp	r6, #0
 8001b98:	d0f9      	beq.n	8001b8e <__sflush_r+0x1a>
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001ba0:	682f      	ldr	r7, [r5, #0]
 8001ba2:	6a21      	ldr	r1, [r4, #32]
 8001ba4:	602b      	str	r3, [r5, #0]
 8001ba6:	d032      	beq.n	8001c0e <__sflush_r+0x9a>
 8001ba8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8001baa:	89a3      	ldrh	r3, [r4, #12]
 8001bac:	075a      	lsls	r2, r3, #29
 8001bae:	d505      	bpl.n	8001bbc <__sflush_r+0x48>
 8001bb0:	6863      	ldr	r3, [r4, #4]
 8001bb2:	1ac0      	subs	r0, r0, r3
 8001bb4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001bb6:	b10b      	cbz	r3, 8001bbc <__sflush_r+0x48>
 8001bb8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8001bba:	1ac0      	subs	r0, r0, r3
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	4602      	mov	r2, r0
 8001bc0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001bc2:	6a21      	ldr	r1, [r4, #32]
 8001bc4:	4628      	mov	r0, r5
 8001bc6:	47b0      	blx	r6
 8001bc8:	1c43      	adds	r3, r0, #1
 8001bca:	89a3      	ldrh	r3, [r4, #12]
 8001bcc:	d106      	bne.n	8001bdc <__sflush_r+0x68>
 8001bce:	6829      	ldr	r1, [r5, #0]
 8001bd0:	291d      	cmp	r1, #29
 8001bd2:	d848      	bhi.n	8001c66 <__sflush_r+0xf2>
 8001bd4:	4a29      	ldr	r2, [pc, #164]	; (8001c7c <__sflush_r+0x108>)
 8001bd6:	40ca      	lsrs	r2, r1
 8001bd8:	07d6      	lsls	r6, r2, #31
 8001bda:	d544      	bpl.n	8001c66 <__sflush_r+0xf2>
 8001bdc:	2200      	movs	r2, #0
 8001bde:	6062      	str	r2, [r4, #4]
 8001be0:	04d9      	lsls	r1, r3, #19
 8001be2:	6922      	ldr	r2, [r4, #16]
 8001be4:	6022      	str	r2, [r4, #0]
 8001be6:	d504      	bpl.n	8001bf2 <__sflush_r+0x7e>
 8001be8:	1c42      	adds	r2, r0, #1
 8001bea:	d101      	bne.n	8001bf0 <__sflush_r+0x7c>
 8001bec:	682b      	ldr	r3, [r5, #0]
 8001bee:	b903      	cbnz	r3, 8001bf2 <__sflush_r+0x7e>
 8001bf0:	6560      	str	r0, [r4, #84]	; 0x54
 8001bf2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001bf4:	602f      	str	r7, [r5, #0]
 8001bf6:	2900      	cmp	r1, #0
 8001bf8:	d0c9      	beq.n	8001b8e <__sflush_r+0x1a>
 8001bfa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001bfe:	4299      	cmp	r1, r3
 8001c00:	d002      	beq.n	8001c08 <__sflush_r+0x94>
 8001c02:	4628      	mov	r0, r5
 8001c04:	f000 f994 	bl	8001f30 <_free_r>
 8001c08:	2000      	movs	r0, #0
 8001c0a:	6360      	str	r0, [r4, #52]	; 0x34
 8001c0c:	e7c0      	b.n	8001b90 <__sflush_r+0x1c>
 8001c0e:	2301      	movs	r3, #1
 8001c10:	4628      	mov	r0, r5
 8001c12:	47b0      	blx	r6
 8001c14:	1c41      	adds	r1, r0, #1
 8001c16:	d1c8      	bne.n	8001baa <__sflush_r+0x36>
 8001c18:	682b      	ldr	r3, [r5, #0]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0c5      	beq.n	8001baa <__sflush_r+0x36>
 8001c1e:	2b1d      	cmp	r3, #29
 8001c20:	d001      	beq.n	8001c26 <__sflush_r+0xb2>
 8001c22:	2b16      	cmp	r3, #22
 8001c24:	d101      	bne.n	8001c2a <__sflush_r+0xb6>
 8001c26:	602f      	str	r7, [r5, #0]
 8001c28:	e7b1      	b.n	8001b8e <__sflush_r+0x1a>
 8001c2a:	89a3      	ldrh	r3, [r4, #12]
 8001c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c30:	81a3      	strh	r3, [r4, #12]
 8001c32:	e7ad      	b.n	8001b90 <__sflush_r+0x1c>
 8001c34:	690f      	ldr	r7, [r1, #16]
 8001c36:	2f00      	cmp	r7, #0
 8001c38:	d0a9      	beq.n	8001b8e <__sflush_r+0x1a>
 8001c3a:	0793      	lsls	r3, r2, #30
 8001c3c:	680e      	ldr	r6, [r1, #0]
 8001c3e:	bf08      	it	eq
 8001c40:	694b      	ldreq	r3, [r1, #20]
 8001c42:	600f      	str	r7, [r1, #0]
 8001c44:	bf18      	it	ne
 8001c46:	2300      	movne	r3, #0
 8001c48:	eba6 0807 	sub.w	r8, r6, r7
 8001c4c:	608b      	str	r3, [r1, #8]
 8001c4e:	f1b8 0f00 	cmp.w	r8, #0
 8001c52:	dd9c      	ble.n	8001b8e <__sflush_r+0x1a>
 8001c54:	4643      	mov	r3, r8
 8001c56:	463a      	mov	r2, r7
 8001c58:	6a21      	ldr	r1, [r4, #32]
 8001c5a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001c5c:	4628      	mov	r0, r5
 8001c5e:	47b0      	blx	r6
 8001c60:	2800      	cmp	r0, #0
 8001c62:	dc06      	bgt.n	8001c72 <__sflush_r+0xfe>
 8001c64:	89a3      	ldrh	r3, [r4, #12]
 8001c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c6a:	81a3      	strh	r3, [r4, #12]
 8001c6c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c70:	e78e      	b.n	8001b90 <__sflush_r+0x1c>
 8001c72:	4407      	add	r7, r0
 8001c74:	eba8 0800 	sub.w	r8, r8, r0
 8001c78:	e7e9      	b.n	8001c4e <__sflush_r+0xda>
 8001c7a:	bf00      	nop
 8001c7c:	20400001 	.word	0x20400001

08001c80 <_fflush_r>:
 8001c80:	b538      	push	{r3, r4, r5, lr}
 8001c82:	690b      	ldr	r3, [r1, #16]
 8001c84:	4605      	mov	r5, r0
 8001c86:	460c      	mov	r4, r1
 8001c88:	b1db      	cbz	r3, 8001cc2 <_fflush_r+0x42>
 8001c8a:	b118      	cbz	r0, 8001c94 <_fflush_r+0x14>
 8001c8c:	6983      	ldr	r3, [r0, #24]
 8001c8e:	b90b      	cbnz	r3, 8001c94 <_fflush_r+0x14>
 8001c90:	f000 f860 	bl	8001d54 <__sinit>
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <_fflush_r+0x48>)
 8001c96:	429c      	cmp	r4, r3
 8001c98:	d109      	bne.n	8001cae <_fflush_r+0x2e>
 8001c9a:	686c      	ldr	r4, [r5, #4]
 8001c9c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ca0:	b17b      	cbz	r3, 8001cc2 <_fflush_r+0x42>
 8001ca2:	4621      	mov	r1, r4
 8001ca4:	4628      	mov	r0, r5
 8001ca6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001caa:	f7ff bf63 	b.w	8001b74 <__sflush_r>
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <_fflush_r+0x4c>)
 8001cb0:	429c      	cmp	r4, r3
 8001cb2:	d101      	bne.n	8001cb8 <_fflush_r+0x38>
 8001cb4:	68ac      	ldr	r4, [r5, #8]
 8001cb6:	e7f1      	b.n	8001c9c <_fflush_r+0x1c>
 8001cb8:	4b05      	ldr	r3, [pc, #20]	; (8001cd0 <_fflush_r+0x50>)
 8001cba:	429c      	cmp	r4, r3
 8001cbc:	bf08      	it	eq
 8001cbe:	68ec      	ldreq	r4, [r5, #12]
 8001cc0:	e7ec      	b.n	8001c9c <_fflush_r+0x1c>
 8001cc2:	2000      	movs	r0, #0
 8001cc4:	bd38      	pop	{r3, r4, r5, pc}
 8001cc6:	bf00      	nop
 8001cc8:	08002250 	.word	0x08002250
 8001ccc:	08002270 	.word	0x08002270
 8001cd0:	08002230 	.word	0x08002230

08001cd4 <std>:
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	b510      	push	{r4, lr}
 8001cd8:	4604      	mov	r4, r0
 8001cda:	e9c0 3300 	strd	r3, r3, [r0]
 8001cde:	6083      	str	r3, [r0, #8]
 8001ce0:	8181      	strh	r1, [r0, #12]
 8001ce2:	6643      	str	r3, [r0, #100]	; 0x64
 8001ce4:	81c2      	strh	r2, [r0, #14]
 8001ce6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001cea:	6183      	str	r3, [r0, #24]
 8001cec:	4619      	mov	r1, r3
 8001cee:	2208      	movs	r2, #8
 8001cf0:	305c      	adds	r0, #92	; 0x5c
 8001cf2:	f7ff fe13 	bl	800191c <memset>
 8001cf6:	4b05      	ldr	r3, [pc, #20]	; (8001d0c <std+0x38>)
 8001cf8:	6263      	str	r3, [r4, #36]	; 0x24
 8001cfa:	4b05      	ldr	r3, [pc, #20]	; (8001d10 <std+0x3c>)
 8001cfc:	62a3      	str	r3, [r4, #40]	; 0x28
 8001cfe:	4b05      	ldr	r3, [pc, #20]	; (8001d14 <std+0x40>)
 8001d00:	62e3      	str	r3, [r4, #44]	; 0x2c
 8001d02:	4b05      	ldr	r3, [pc, #20]	; (8001d18 <std+0x44>)
 8001d04:	6224      	str	r4, [r4, #32]
 8001d06:	6323      	str	r3, [r4, #48]	; 0x30
 8001d08:	bd10      	pop	{r4, pc}
 8001d0a:	bf00      	nop
 8001d0c:	080020a1 	.word	0x080020a1
 8001d10:	080020c3 	.word	0x080020c3
 8001d14:	080020fb 	.word	0x080020fb
 8001d18:	0800211f 	.word	0x0800211f

08001d1c <_cleanup_r>:
 8001d1c:	4901      	ldr	r1, [pc, #4]	; (8001d24 <_cleanup_r+0x8>)
 8001d1e:	f000 b885 	b.w	8001e2c <_fwalk_reent>
 8001d22:	bf00      	nop
 8001d24:	08001c81 	.word	0x08001c81

08001d28 <__sfmoreglue>:
 8001d28:	b570      	push	{r4, r5, r6, lr}
 8001d2a:	1e4a      	subs	r2, r1, #1
 8001d2c:	2568      	movs	r5, #104	; 0x68
 8001d2e:	4355      	muls	r5, r2
 8001d30:	460e      	mov	r6, r1
 8001d32:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8001d36:	f000 f949 	bl	8001fcc <_malloc_r>
 8001d3a:	4604      	mov	r4, r0
 8001d3c:	b140      	cbz	r0, 8001d50 <__sfmoreglue+0x28>
 8001d3e:	2100      	movs	r1, #0
 8001d40:	e9c0 1600 	strd	r1, r6, [r0]
 8001d44:	300c      	adds	r0, #12
 8001d46:	60a0      	str	r0, [r4, #8]
 8001d48:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8001d4c:	f7ff fde6 	bl	800191c <memset>
 8001d50:	4620      	mov	r0, r4
 8001d52:	bd70      	pop	{r4, r5, r6, pc}

08001d54 <__sinit>:
 8001d54:	6983      	ldr	r3, [r0, #24]
 8001d56:	b510      	push	{r4, lr}
 8001d58:	4604      	mov	r4, r0
 8001d5a:	bb33      	cbnz	r3, 8001daa <__sinit+0x56>
 8001d5c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8001d60:	6503      	str	r3, [r0, #80]	; 0x50
 8001d62:	4b12      	ldr	r3, [pc, #72]	; (8001dac <__sinit+0x58>)
 8001d64:	4a12      	ldr	r2, [pc, #72]	; (8001db0 <__sinit+0x5c>)
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	6282      	str	r2, [r0, #40]	; 0x28
 8001d6a:	4298      	cmp	r0, r3
 8001d6c:	bf04      	itt	eq
 8001d6e:	2301      	moveq	r3, #1
 8001d70:	6183      	streq	r3, [r0, #24]
 8001d72:	f000 f81f 	bl	8001db4 <__sfp>
 8001d76:	6060      	str	r0, [r4, #4]
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f000 f81b 	bl	8001db4 <__sfp>
 8001d7e:	60a0      	str	r0, [r4, #8]
 8001d80:	4620      	mov	r0, r4
 8001d82:	f000 f817 	bl	8001db4 <__sfp>
 8001d86:	2200      	movs	r2, #0
 8001d88:	60e0      	str	r0, [r4, #12]
 8001d8a:	2104      	movs	r1, #4
 8001d8c:	6860      	ldr	r0, [r4, #4]
 8001d8e:	f7ff ffa1 	bl	8001cd4 <std>
 8001d92:	2201      	movs	r2, #1
 8001d94:	2109      	movs	r1, #9
 8001d96:	68a0      	ldr	r0, [r4, #8]
 8001d98:	f7ff ff9c 	bl	8001cd4 <std>
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	2112      	movs	r1, #18
 8001da0:	68e0      	ldr	r0, [r4, #12]
 8001da2:	f7ff ff97 	bl	8001cd4 <std>
 8001da6:	2301      	movs	r3, #1
 8001da8:	61a3      	str	r3, [r4, #24]
 8001daa:	bd10      	pop	{r4, pc}
 8001dac:	0800222c 	.word	0x0800222c
 8001db0:	08001d1d 	.word	0x08001d1d

08001db4 <__sfp>:
 8001db4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001db6:	4b1b      	ldr	r3, [pc, #108]	; (8001e24 <__sfp+0x70>)
 8001db8:	681e      	ldr	r6, [r3, #0]
 8001dba:	69b3      	ldr	r3, [r6, #24]
 8001dbc:	4607      	mov	r7, r0
 8001dbe:	b913      	cbnz	r3, 8001dc6 <__sfp+0x12>
 8001dc0:	4630      	mov	r0, r6
 8001dc2:	f7ff ffc7 	bl	8001d54 <__sinit>
 8001dc6:	3648      	adds	r6, #72	; 0x48
 8001dc8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001dcc:	3b01      	subs	r3, #1
 8001dce:	d503      	bpl.n	8001dd8 <__sfp+0x24>
 8001dd0:	6833      	ldr	r3, [r6, #0]
 8001dd2:	b133      	cbz	r3, 8001de2 <__sfp+0x2e>
 8001dd4:	6836      	ldr	r6, [r6, #0]
 8001dd6:	e7f7      	b.n	8001dc8 <__sfp+0x14>
 8001dd8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001ddc:	b16d      	cbz	r5, 8001dfa <__sfp+0x46>
 8001dde:	3468      	adds	r4, #104	; 0x68
 8001de0:	e7f4      	b.n	8001dcc <__sfp+0x18>
 8001de2:	2104      	movs	r1, #4
 8001de4:	4638      	mov	r0, r7
 8001de6:	f7ff ff9f 	bl	8001d28 <__sfmoreglue>
 8001dea:	6030      	str	r0, [r6, #0]
 8001dec:	2800      	cmp	r0, #0
 8001dee:	d1f1      	bne.n	8001dd4 <__sfp+0x20>
 8001df0:	230c      	movs	r3, #12
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	4604      	mov	r4, r0
 8001df6:	4620      	mov	r0, r4
 8001df8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001dfa:	4b0b      	ldr	r3, [pc, #44]	; (8001e28 <__sfp+0x74>)
 8001dfc:	6665      	str	r5, [r4, #100]	; 0x64
 8001dfe:	e9c4 5500 	strd	r5, r5, [r4]
 8001e02:	60a5      	str	r5, [r4, #8]
 8001e04:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8001e08:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	4629      	mov	r1, r5
 8001e10:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001e14:	f7ff fd82 	bl	800191c <memset>
 8001e18:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001e1c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8001e20:	e7e9      	b.n	8001df6 <__sfp+0x42>
 8001e22:	bf00      	nop
 8001e24:	0800222c 	.word	0x0800222c
 8001e28:	ffff0001 	.word	0xffff0001

08001e2c <_fwalk_reent>:
 8001e2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8001e30:	4680      	mov	r8, r0
 8001e32:	4689      	mov	r9, r1
 8001e34:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001e38:	2600      	movs	r6, #0
 8001e3a:	b914      	cbnz	r4, 8001e42 <_fwalk_reent+0x16>
 8001e3c:	4630      	mov	r0, r6
 8001e3e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8001e42:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8001e46:	3f01      	subs	r7, #1
 8001e48:	d501      	bpl.n	8001e4e <_fwalk_reent+0x22>
 8001e4a:	6824      	ldr	r4, [r4, #0]
 8001e4c:	e7f5      	b.n	8001e3a <_fwalk_reent+0xe>
 8001e4e:	89ab      	ldrh	r3, [r5, #12]
 8001e50:	2b01      	cmp	r3, #1
 8001e52:	d907      	bls.n	8001e64 <_fwalk_reent+0x38>
 8001e54:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8001e58:	3301      	adds	r3, #1
 8001e5a:	d003      	beq.n	8001e64 <_fwalk_reent+0x38>
 8001e5c:	4629      	mov	r1, r5
 8001e5e:	4640      	mov	r0, r8
 8001e60:	47c8      	blx	r9
 8001e62:	4306      	orrs	r6, r0
 8001e64:	3568      	adds	r5, #104	; 0x68
 8001e66:	e7ee      	b.n	8001e46 <_fwalk_reent+0x1a>

08001e68 <__swhatbuf_r>:
 8001e68:	b570      	push	{r4, r5, r6, lr}
 8001e6a:	460e      	mov	r6, r1
 8001e6c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001e70:	2900      	cmp	r1, #0
 8001e72:	b096      	sub	sp, #88	; 0x58
 8001e74:	4614      	mov	r4, r2
 8001e76:	461d      	mov	r5, r3
 8001e78:	da07      	bge.n	8001e8a <__swhatbuf_r+0x22>
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	602b      	str	r3, [r5, #0]
 8001e7e:	89b3      	ldrh	r3, [r6, #12]
 8001e80:	061a      	lsls	r2, r3, #24
 8001e82:	d410      	bmi.n	8001ea6 <__swhatbuf_r+0x3e>
 8001e84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001e88:	e00e      	b.n	8001ea8 <__swhatbuf_r+0x40>
 8001e8a:	466a      	mov	r2, sp
 8001e8c:	f000 f96e 	bl	800216c <_fstat_r>
 8001e90:	2800      	cmp	r0, #0
 8001e92:	dbf2      	blt.n	8001e7a <__swhatbuf_r+0x12>
 8001e94:	9a01      	ldr	r2, [sp, #4]
 8001e96:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001e9a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001e9e:	425a      	negs	r2, r3
 8001ea0:	415a      	adcs	r2, r3
 8001ea2:	602a      	str	r2, [r5, #0]
 8001ea4:	e7ee      	b.n	8001e84 <__swhatbuf_r+0x1c>
 8001ea6:	2340      	movs	r3, #64	; 0x40
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	6023      	str	r3, [r4, #0]
 8001eac:	b016      	add	sp, #88	; 0x58
 8001eae:	bd70      	pop	{r4, r5, r6, pc}

08001eb0 <__smakebuf_r>:
 8001eb0:	898b      	ldrh	r3, [r1, #12]
 8001eb2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001eb4:	079d      	lsls	r5, r3, #30
 8001eb6:	4606      	mov	r6, r0
 8001eb8:	460c      	mov	r4, r1
 8001eba:	d507      	bpl.n	8001ecc <__smakebuf_r+0x1c>
 8001ebc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001ec0:	6023      	str	r3, [r4, #0]
 8001ec2:	6123      	str	r3, [r4, #16]
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	6163      	str	r3, [r4, #20]
 8001ec8:	b002      	add	sp, #8
 8001eca:	bd70      	pop	{r4, r5, r6, pc}
 8001ecc:	ab01      	add	r3, sp, #4
 8001ece:	466a      	mov	r2, sp
 8001ed0:	f7ff ffca 	bl	8001e68 <__swhatbuf_r>
 8001ed4:	9900      	ldr	r1, [sp, #0]
 8001ed6:	4605      	mov	r5, r0
 8001ed8:	4630      	mov	r0, r6
 8001eda:	f000 f877 	bl	8001fcc <_malloc_r>
 8001ede:	b948      	cbnz	r0, 8001ef4 <__smakebuf_r+0x44>
 8001ee0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001ee4:	059a      	lsls	r2, r3, #22
 8001ee6:	d4ef      	bmi.n	8001ec8 <__smakebuf_r+0x18>
 8001ee8:	f023 0303 	bic.w	r3, r3, #3
 8001eec:	f043 0302 	orr.w	r3, r3, #2
 8001ef0:	81a3      	strh	r3, [r4, #12]
 8001ef2:	e7e3      	b.n	8001ebc <__smakebuf_r+0xc>
 8001ef4:	4b0d      	ldr	r3, [pc, #52]	; (8001f2c <__smakebuf_r+0x7c>)
 8001ef6:	62b3      	str	r3, [r6, #40]	; 0x28
 8001ef8:	89a3      	ldrh	r3, [r4, #12]
 8001efa:	6020      	str	r0, [r4, #0]
 8001efc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001f00:	81a3      	strh	r3, [r4, #12]
 8001f02:	9b00      	ldr	r3, [sp, #0]
 8001f04:	6163      	str	r3, [r4, #20]
 8001f06:	9b01      	ldr	r3, [sp, #4]
 8001f08:	6120      	str	r0, [r4, #16]
 8001f0a:	b15b      	cbz	r3, 8001f24 <__smakebuf_r+0x74>
 8001f0c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001f10:	4630      	mov	r0, r6
 8001f12:	f000 f93d 	bl	8002190 <_isatty_r>
 8001f16:	b128      	cbz	r0, 8001f24 <__smakebuf_r+0x74>
 8001f18:	89a3      	ldrh	r3, [r4, #12]
 8001f1a:	f023 0303 	bic.w	r3, r3, #3
 8001f1e:	f043 0301 	orr.w	r3, r3, #1
 8001f22:	81a3      	strh	r3, [r4, #12]
 8001f24:	89a3      	ldrh	r3, [r4, #12]
 8001f26:	431d      	orrs	r5, r3
 8001f28:	81a5      	strh	r5, [r4, #12]
 8001f2a:	e7cd      	b.n	8001ec8 <__smakebuf_r+0x18>
 8001f2c:	08001d1d 	.word	0x08001d1d

08001f30 <_free_r>:
 8001f30:	b538      	push	{r3, r4, r5, lr}
 8001f32:	4605      	mov	r5, r0
 8001f34:	2900      	cmp	r1, #0
 8001f36:	d045      	beq.n	8001fc4 <_free_r+0x94>
 8001f38:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001f3c:	1f0c      	subs	r4, r1, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	bfb8      	it	lt
 8001f42:	18e4      	addlt	r4, r4, r3
 8001f44:	f000 f946 	bl	80021d4 <__malloc_lock>
 8001f48:	4a1f      	ldr	r2, [pc, #124]	; (8001fc8 <_free_r+0x98>)
 8001f4a:	6813      	ldr	r3, [r2, #0]
 8001f4c:	4610      	mov	r0, r2
 8001f4e:	b933      	cbnz	r3, 8001f5e <_free_r+0x2e>
 8001f50:	6063      	str	r3, [r4, #4]
 8001f52:	6014      	str	r4, [r2, #0]
 8001f54:	4628      	mov	r0, r5
 8001f56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8001f5a:	f000 b93c 	b.w	80021d6 <__malloc_unlock>
 8001f5e:	42a3      	cmp	r3, r4
 8001f60:	d90c      	bls.n	8001f7c <_free_r+0x4c>
 8001f62:	6821      	ldr	r1, [r4, #0]
 8001f64:	1862      	adds	r2, r4, r1
 8001f66:	4293      	cmp	r3, r2
 8001f68:	bf04      	itt	eq
 8001f6a:	681a      	ldreq	r2, [r3, #0]
 8001f6c:	685b      	ldreq	r3, [r3, #4]
 8001f6e:	6063      	str	r3, [r4, #4]
 8001f70:	bf04      	itt	eq
 8001f72:	1852      	addeq	r2, r2, r1
 8001f74:	6022      	streq	r2, [r4, #0]
 8001f76:	6004      	str	r4, [r0, #0]
 8001f78:	e7ec      	b.n	8001f54 <_free_r+0x24>
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	685a      	ldr	r2, [r3, #4]
 8001f7e:	b10a      	cbz	r2, 8001f84 <_free_r+0x54>
 8001f80:	42a2      	cmp	r2, r4
 8001f82:	d9fa      	bls.n	8001f7a <_free_r+0x4a>
 8001f84:	6819      	ldr	r1, [r3, #0]
 8001f86:	1858      	adds	r0, r3, r1
 8001f88:	42a0      	cmp	r0, r4
 8001f8a:	d10b      	bne.n	8001fa4 <_free_r+0x74>
 8001f8c:	6820      	ldr	r0, [r4, #0]
 8001f8e:	4401      	add	r1, r0
 8001f90:	1858      	adds	r0, r3, r1
 8001f92:	4282      	cmp	r2, r0
 8001f94:	6019      	str	r1, [r3, #0]
 8001f96:	d1dd      	bne.n	8001f54 <_free_r+0x24>
 8001f98:	6810      	ldr	r0, [r2, #0]
 8001f9a:	6852      	ldr	r2, [r2, #4]
 8001f9c:	605a      	str	r2, [r3, #4]
 8001f9e:	4401      	add	r1, r0
 8001fa0:	6019      	str	r1, [r3, #0]
 8001fa2:	e7d7      	b.n	8001f54 <_free_r+0x24>
 8001fa4:	d902      	bls.n	8001fac <_free_r+0x7c>
 8001fa6:	230c      	movs	r3, #12
 8001fa8:	602b      	str	r3, [r5, #0]
 8001faa:	e7d3      	b.n	8001f54 <_free_r+0x24>
 8001fac:	6820      	ldr	r0, [r4, #0]
 8001fae:	1821      	adds	r1, r4, r0
 8001fb0:	428a      	cmp	r2, r1
 8001fb2:	bf04      	itt	eq
 8001fb4:	6811      	ldreq	r1, [r2, #0]
 8001fb6:	6852      	ldreq	r2, [r2, #4]
 8001fb8:	6062      	str	r2, [r4, #4]
 8001fba:	bf04      	itt	eq
 8001fbc:	1809      	addeq	r1, r1, r0
 8001fbe:	6021      	streq	r1, [r4, #0]
 8001fc0:	605c      	str	r4, [r3, #4]
 8001fc2:	e7c7      	b.n	8001f54 <_free_r+0x24>
 8001fc4:	bd38      	pop	{r3, r4, r5, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20000090 	.word	0x20000090

08001fcc <_malloc_r>:
 8001fcc:	b570      	push	{r4, r5, r6, lr}
 8001fce:	1ccd      	adds	r5, r1, #3
 8001fd0:	f025 0503 	bic.w	r5, r5, #3
 8001fd4:	3508      	adds	r5, #8
 8001fd6:	2d0c      	cmp	r5, #12
 8001fd8:	bf38      	it	cc
 8001fda:	250c      	movcc	r5, #12
 8001fdc:	2d00      	cmp	r5, #0
 8001fde:	4606      	mov	r6, r0
 8001fe0:	db01      	blt.n	8001fe6 <_malloc_r+0x1a>
 8001fe2:	42a9      	cmp	r1, r5
 8001fe4:	d903      	bls.n	8001fee <_malloc_r+0x22>
 8001fe6:	230c      	movs	r3, #12
 8001fe8:	6033      	str	r3, [r6, #0]
 8001fea:	2000      	movs	r0, #0
 8001fec:	bd70      	pop	{r4, r5, r6, pc}
 8001fee:	f000 f8f1 	bl	80021d4 <__malloc_lock>
 8001ff2:	4a21      	ldr	r2, [pc, #132]	; (8002078 <_malloc_r+0xac>)
 8001ff4:	6814      	ldr	r4, [r2, #0]
 8001ff6:	4621      	mov	r1, r4
 8001ff8:	b991      	cbnz	r1, 8002020 <_malloc_r+0x54>
 8001ffa:	4c20      	ldr	r4, [pc, #128]	; (800207c <_malloc_r+0xb0>)
 8001ffc:	6823      	ldr	r3, [r4, #0]
 8001ffe:	b91b      	cbnz	r3, 8002008 <_malloc_r+0x3c>
 8002000:	4630      	mov	r0, r6
 8002002:	f000 f83d 	bl	8002080 <_sbrk_r>
 8002006:	6020      	str	r0, [r4, #0]
 8002008:	4629      	mov	r1, r5
 800200a:	4630      	mov	r0, r6
 800200c:	f000 f838 	bl	8002080 <_sbrk_r>
 8002010:	1c43      	adds	r3, r0, #1
 8002012:	d124      	bne.n	800205e <_malloc_r+0x92>
 8002014:	230c      	movs	r3, #12
 8002016:	6033      	str	r3, [r6, #0]
 8002018:	4630      	mov	r0, r6
 800201a:	f000 f8dc 	bl	80021d6 <__malloc_unlock>
 800201e:	e7e4      	b.n	8001fea <_malloc_r+0x1e>
 8002020:	680b      	ldr	r3, [r1, #0]
 8002022:	1b5b      	subs	r3, r3, r5
 8002024:	d418      	bmi.n	8002058 <_malloc_r+0x8c>
 8002026:	2b0b      	cmp	r3, #11
 8002028:	d90f      	bls.n	800204a <_malloc_r+0x7e>
 800202a:	600b      	str	r3, [r1, #0]
 800202c:	50cd      	str	r5, [r1, r3]
 800202e:	18cc      	adds	r4, r1, r3
 8002030:	4630      	mov	r0, r6
 8002032:	f000 f8d0 	bl	80021d6 <__malloc_unlock>
 8002036:	f104 000b 	add.w	r0, r4, #11
 800203a:	1d23      	adds	r3, r4, #4
 800203c:	f020 0007 	bic.w	r0, r0, #7
 8002040:	1ac3      	subs	r3, r0, r3
 8002042:	d0d3      	beq.n	8001fec <_malloc_r+0x20>
 8002044:	425a      	negs	r2, r3
 8002046:	50e2      	str	r2, [r4, r3]
 8002048:	e7d0      	b.n	8001fec <_malloc_r+0x20>
 800204a:	428c      	cmp	r4, r1
 800204c:	684b      	ldr	r3, [r1, #4]
 800204e:	bf16      	itet	ne
 8002050:	6063      	strne	r3, [r4, #4]
 8002052:	6013      	streq	r3, [r2, #0]
 8002054:	460c      	movne	r4, r1
 8002056:	e7eb      	b.n	8002030 <_malloc_r+0x64>
 8002058:	460c      	mov	r4, r1
 800205a:	6849      	ldr	r1, [r1, #4]
 800205c:	e7cc      	b.n	8001ff8 <_malloc_r+0x2c>
 800205e:	1cc4      	adds	r4, r0, #3
 8002060:	f024 0403 	bic.w	r4, r4, #3
 8002064:	42a0      	cmp	r0, r4
 8002066:	d005      	beq.n	8002074 <_malloc_r+0xa8>
 8002068:	1a21      	subs	r1, r4, r0
 800206a:	4630      	mov	r0, r6
 800206c:	f000 f808 	bl	8002080 <_sbrk_r>
 8002070:	3001      	adds	r0, #1
 8002072:	d0cf      	beq.n	8002014 <_malloc_r+0x48>
 8002074:	6025      	str	r5, [r4, #0]
 8002076:	e7db      	b.n	8002030 <_malloc_r+0x64>
 8002078:	20000090 	.word	0x20000090
 800207c:	20000094 	.word	0x20000094

08002080 <_sbrk_r>:
 8002080:	b538      	push	{r3, r4, r5, lr}
 8002082:	4c06      	ldr	r4, [pc, #24]	; (800209c <_sbrk_r+0x1c>)
 8002084:	2300      	movs	r3, #0
 8002086:	4605      	mov	r5, r0
 8002088:	4608      	mov	r0, r1
 800208a:	6023      	str	r3, [r4, #0]
 800208c:	f7ff fb90 	bl	80017b0 <_sbrk>
 8002090:	1c43      	adds	r3, r0, #1
 8002092:	d102      	bne.n	800209a <_sbrk_r+0x1a>
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	b103      	cbz	r3, 800209a <_sbrk_r+0x1a>
 8002098:	602b      	str	r3, [r5, #0]
 800209a:	bd38      	pop	{r3, r4, r5, pc}
 800209c:	2000009c 	.word	0x2000009c

080020a0 <__sread>:
 80020a0:	b510      	push	{r4, lr}
 80020a2:	460c      	mov	r4, r1
 80020a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020a8:	f000 f896 	bl	80021d8 <_read_r>
 80020ac:	2800      	cmp	r0, #0
 80020ae:	bfab      	itete	ge
 80020b0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80020b2:	89a3      	ldrhlt	r3, [r4, #12]
 80020b4:	181b      	addge	r3, r3, r0
 80020b6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80020ba:	bfac      	ite	ge
 80020bc:	6563      	strge	r3, [r4, #84]	; 0x54
 80020be:	81a3      	strhlt	r3, [r4, #12]
 80020c0:	bd10      	pop	{r4, pc}

080020c2 <__swrite>:
 80020c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80020c6:	461f      	mov	r7, r3
 80020c8:	898b      	ldrh	r3, [r1, #12]
 80020ca:	05db      	lsls	r3, r3, #23
 80020cc:	4605      	mov	r5, r0
 80020ce:	460c      	mov	r4, r1
 80020d0:	4616      	mov	r6, r2
 80020d2:	d505      	bpl.n	80020e0 <__swrite+0x1e>
 80020d4:	2302      	movs	r3, #2
 80020d6:	2200      	movs	r2, #0
 80020d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020dc:	f000 f868 	bl	80021b0 <_lseek_r>
 80020e0:	89a3      	ldrh	r3, [r4, #12]
 80020e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80020e6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80020ea:	81a3      	strh	r3, [r4, #12]
 80020ec:	4632      	mov	r2, r6
 80020ee:	463b      	mov	r3, r7
 80020f0:	4628      	mov	r0, r5
 80020f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80020f6:	f000 b817 	b.w	8002128 <_write_r>

080020fa <__sseek>:
 80020fa:	b510      	push	{r4, lr}
 80020fc:	460c      	mov	r4, r1
 80020fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002102:	f000 f855 	bl	80021b0 <_lseek_r>
 8002106:	1c43      	adds	r3, r0, #1
 8002108:	89a3      	ldrh	r3, [r4, #12]
 800210a:	bf15      	itete	ne
 800210c:	6560      	strne	r0, [r4, #84]	; 0x54
 800210e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002112:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002116:	81a3      	strheq	r3, [r4, #12]
 8002118:	bf18      	it	ne
 800211a:	81a3      	strhne	r3, [r4, #12]
 800211c:	bd10      	pop	{r4, pc}

0800211e <__sclose>:
 800211e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002122:	f000 b813 	b.w	800214c <_close_r>
	...

08002128 <_write_r>:
 8002128:	b538      	push	{r3, r4, r5, lr}
 800212a:	4c07      	ldr	r4, [pc, #28]	; (8002148 <_write_r+0x20>)
 800212c:	4605      	mov	r5, r0
 800212e:	4608      	mov	r0, r1
 8002130:	4611      	mov	r1, r2
 8002132:	2200      	movs	r2, #0
 8002134:	6022      	str	r2, [r4, #0]
 8002136:	461a      	mov	r2, r3
 8002138:	f7ff fa6e 	bl	8001618 <_write>
 800213c:	1c43      	adds	r3, r0, #1
 800213e:	d102      	bne.n	8002146 <_write_r+0x1e>
 8002140:	6823      	ldr	r3, [r4, #0]
 8002142:	b103      	cbz	r3, 8002146 <_write_r+0x1e>
 8002144:	602b      	str	r3, [r5, #0]
 8002146:	bd38      	pop	{r3, r4, r5, pc}
 8002148:	2000009c 	.word	0x2000009c

0800214c <_close_r>:
 800214c:	b538      	push	{r3, r4, r5, lr}
 800214e:	4c06      	ldr	r4, [pc, #24]	; (8002168 <_close_r+0x1c>)
 8002150:	2300      	movs	r3, #0
 8002152:	4605      	mov	r5, r0
 8002154:	4608      	mov	r0, r1
 8002156:	6023      	str	r3, [r4, #0]
 8002158:	f7ff faf5 	bl	8001746 <_close>
 800215c:	1c43      	adds	r3, r0, #1
 800215e:	d102      	bne.n	8002166 <_close_r+0x1a>
 8002160:	6823      	ldr	r3, [r4, #0]
 8002162:	b103      	cbz	r3, 8002166 <_close_r+0x1a>
 8002164:	602b      	str	r3, [r5, #0]
 8002166:	bd38      	pop	{r3, r4, r5, pc}
 8002168:	2000009c 	.word	0x2000009c

0800216c <_fstat_r>:
 800216c:	b538      	push	{r3, r4, r5, lr}
 800216e:	4c07      	ldr	r4, [pc, #28]	; (800218c <_fstat_r+0x20>)
 8002170:	2300      	movs	r3, #0
 8002172:	4605      	mov	r5, r0
 8002174:	4608      	mov	r0, r1
 8002176:	4611      	mov	r1, r2
 8002178:	6023      	str	r3, [r4, #0]
 800217a:	f7ff faf0 	bl	800175e <_fstat>
 800217e:	1c43      	adds	r3, r0, #1
 8002180:	d102      	bne.n	8002188 <_fstat_r+0x1c>
 8002182:	6823      	ldr	r3, [r4, #0]
 8002184:	b103      	cbz	r3, 8002188 <_fstat_r+0x1c>
 8002186:	602b      	str	r3, [r5, #0]
 8002188:	bd38      	pop	{r3, r4, r5, pc}
 800218a:	bf00      	nop
 800218c:	2000009c 	.word	0x2000009c

08002190 <_isatty_r>:
 8002190:	b538      	push	{r3, r4, r5, lr}
 8002192:	4c06      	ldr	r4, [pc, #24]	; (80021ac <_isatty_r+0x1c>)
 8002194:	2300      	movs	r3, #0
 8002196:	4605      	mov	r5, r0
 8002198:	4608      	mov	r0, r1
 800219a:	6023      	str	r3, [r4, #0]
 800219c:	f7ff faef 	bl	800177e <_isatty>
 80021a0:	1c43      	adds	r3, r0, #1
 80021a2:	d102      	bne.n	80021aa <_isatty_r+0x1a>
 80021a4:	6823      	ldr	r3, [r4, #0]
 80021a6:	b103      	cbz	r3, 80021aa <_isatty_r+0x1a>
 80021a8:	602b      	str	r3, [r5, #0]
 80021aa:	bd38      	pop	{r3, r4, r5, pc}
 80021ac:	2000009c 	.word	0x2000009c

080021b0 <_lseek_r>:
 80021b0:	b538      	push	{r3, r4, r5, lr}
 80021b2:	4c07      	ldr	r4, [pc, #28]	; (80021d0 <_lseek_r+0x20>)
 80021b4:	4605      	mov	r5, r0
 80021b6:	4608      	mov	r0, r1
 80021b8:	4611      	mov	r1, r2
 80021ba:	2200      	movs	r2, #0
 80021bc:	6022      	str	r2, [r4, #0]
 80021be:	461a      	mov	r2, r3
 80021c0:	f7ff fae8 	bl	8001794 <_lseek>
 80021c4:	1c43      	adds	r3, r0, #1
 80021c6:	d102      	bne.n	80021ce <_lseek_r+0x1e>
 80021c8:	6823      	ldr	r3, [r4, #0]
 80021ca:	b103      	cbz	r3, 80021ce <_lseek_r+0x1e>
 80021cc:	602b      	str	r3, [r5, #0]
 80021ce:	bd38      	pop	{r3, r4, r5, pc}
 80021d0:	2000009c 	.word	0x2000009c

080021d4 <__malloc_lock>:
 80021d4:	4770      	bx	lr

080021d6 <__malloc_unlock>:
 80021d6:	4770      	bx	lr

080021d8 <_read_r>:
 80021d8:	b538      	push	{r3, r4, r5, lr}
 80021da:	4c07      	ldr	r4, [pc, #28]	; (80021f8 <_read_r+0x20>)
 80021dc:	4605      	mov	r5, r0
 80021de:	4608      	mov	r0, r1
 80021e0:	4611      	mov	r1, r2
 80021e2:	2200      	movs	r2, #0
 80021e4:	6022      	str	r2, [r4, #0]
 80021e6:	461a      	mov	r2, r3
 80021e8:	f7ff fa90 	bl	800170c <_read>
 80021ec:	1c43      	adds	r3, r0, #1
 80021ee:	d102      	bne.n	80021f6 <_read_r+0x1e>
 80021f0:	6823      	ldr	r3, [r4, #0]
 80021f2:	b103      	cbz	r3, 80021f6 <_read_r+0x1e>
 80021f4:	602b      	str	r3, [r5, #0]
 80021f6:	bd38      	pop	{r3, r4, r5, pc}
 80021f8:	2000009c 	.word	0x2000009c

080021fc <_init>:
 80021fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021fe:	bf00      	nop
 8002200:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002202:	bc08      	pop	{r3}
 8002204:	469e      	mov	lr, r3
 8002206:	4770      	bx	lr

08002208 <_fini>:
 8002208:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800220a:	bf00      	nop
 800220c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800220e:	bc08      	pop	{r3}
 8002210:	469e      	mov	lr, r3
 8002212:	4770      	bx	lr
